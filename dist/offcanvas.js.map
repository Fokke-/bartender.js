{"version":3,"sources":["offcanvas.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_createClass","protoProps","staticProps","OffCanvas","options","debug","overlay","closeOnEsc","mainWrapSelector","contentWrapSelector","currentOpenBar","previousOpenButton","resizeTimeout","bars","init","value","text","undefined","console","log","error","_this","mainWrap","document","querySelector","contentWrap","openButtons","querySelectorAll","closeButtons","toggleButtons","classList","add","forEach","bar","addBar","keys","button","position","getAttribute","isValidPosition","addEventListener","open","event","indexOf","keyCode","preventDefault","logError","toggle","close","createElement","appendChild","window","clearTimeout","setTimeout","setContentWrapPush","newBar","OffCanvasBar","element","mode","join","contains","enableFocus","showOverlay","disableFocus","remove","focus","style","removeProperty","hideOverlay","overflow","transform","offsetWidth","offsetHeight","focusableElementSelector","item","setAttribute","removeAttribute"],"mappings":"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","file":"offcanvas.js","sourcesContent":["'use strict';\n\nclass OffCanvas {\n\n  constructor (options) {\n    // Apply user configuration\n    this.options = Object.assign({\n      // Debug mode\n      debug: false,\n\n      // Show shading overlay over content wrapper when bar is open?\n      overlay: true,\n\n      // Close open bar with escape key?\n      closeOnEsc: true,\n\n      // Selector to find main wrapper\n      mainWrapSelector: '.offcanvas-main',\n\n      // Selector to find content wrapper\n      contentWrapSelector: '.offcanvas-content',\n    }, options)\n\n    // Overlay element\n    this.overlay = null\n\n    // Currently open bar\n    this.currentOpenBar = null\n\n    // Button which was previously used to open the bar\n    this.previousOpenButton = null\n\n    // Window resize timeout\n    this.resizeTimeout = null\n\n    // Array for bars\n    this.bars = []\n\n    // Run initializer\n    this.init()\n  }\n\n  // Logging function\n  log (text = '') {\n    console.log('Off-canvas: ' + text)\n  }\n\n  // Error logging function\n  logError (text = '') {\n    console.error('Off-canvas: ' + text)\n  }\n\n  // Debug logging function\n  debug (text = '') {\n    if (!this.options.debug) return\n\n    console.log('Off-canvas debug: ' + text)\n  }\n\n  // Initializer\n  init () {\n    try {\n      // Find and validate required elements\n      this.mainWrap = document.querySelector(this.options.mainWrapSelector)\n      if (!this.mainWrap) throw 'Main wrap element was not found with selector: ' + this.options.mainWrapSelector\n\n      this.contentWrap = this.mainWrap.querySelector(this.options.contentWrapSelector)\n      if (!this.contentWrap) throw 'Content wrap element was not found with selector: ' + this.options.contentWrapSelector\n\n      // Find buttons\n      this.openButtons = this.mainWrap.querySelectorAll('[data-offcanvas-open]')\n      this.closeButtons = this.mainWrap.querySelectorAll('[data-offcanvas-close]')\n      this.toggleButtons = this.mainWrap.querySelectorAll('[data-offcanvas-toggle]')\n\n      // Add classes\n      this.mainWrap.classList.add('offcanvas-main')\n      this.contentWrap.classList.add('offcanvas-content')\n\n      // Find bars\n      this.mainWrap.querySelectorAll('[data-offcanvas-bar]').forEach(bar => {\n        this.addBar(bar)\n      })\n\n      // Check that there's at least one bar defined\n      if (!Object.keys(this.bars).length) throw 'Cannot find any bars.'\n\n      // Add event listeners for open buttons\n      this.openButtons.forEach(button => {\n        let position = button.getAttribute('data-offcanvas-open')\n\n        if (!this.isValidPosition(position)) {\n          this.logError('Open button has invalid bar position \\'' + position + '\\' defined. Use one of the following values: left, right, top, bottom')\n          return\n        }\n\n        button.addEventListener('click', () => this.open(position, button))\n        button.addEventListener('keydown', event => {\n          if ([13, 32].indexOf(event.keyCode) >= 0) {\n            event.preventDefault()\n            this.open(position, button)\n          }\n        })\n      })\n\n      // Add event listeners for toggle buttons\n      this.toggleButtons.forEach(button => {\n        let position = button.getAttribute('data-offcanvas-toggle')\n\n        if (!this.isValidPosition(position)) {\n          this.logError('Toggle button has invalid bar position \\'' + position + '\\' defined. Use one of the following values: left, right, top, bottom')\n          return\n        }\n\n        button.addEventListener('click', () => this.toggle(position, button))\n        button.addEventListener('keydown', event => {\n          if ([13, 32].indexOf(event.keyCode) >= 0) {\n            event.preventDefault()\n            this.toggle(position, button)\n          }\n        })\n      })\n\n      // Add event listeners for close buttons\n      this.closeButtons.forEach(button => {\n        button.addEventListener('click', () => this.close())\n        button.addEventListener('keydown', event => {\n          if ([13, 32].indexOf(event.keyCode) >= 0) {\n            event.preventDefault()\n            this.close()\n          }\n        })\n      })\n\n      // Add overlay\n      if (this.options.overlay && !this.overlay) {\n        this.overlay = document.createElement('div')\n        this.overlay.classList.add('offcanvas-overlay')\n        this.overlay.addEventListener('click', () => this.close())\n        this.overlay.addEventListener('keydown', event => {\n          if ([13, 32].indexOf(event.keyCode) >= 0) {\n            event.preventDefault()\n            this.close()\n          }\n        })\n\n        this.contentWrap.appendChild(this.overlay)\n      }\n\n      // Enable closing the bar with escape key\n      if (this.options.closeOnEsc) {\n        window.addEventListener('keydown', event => {\n          if (event.keyCode === 27) {\n            event.preventDefault()\n            this.close()\n          }\n        })\n      }\n\n      // Adjust content wrapper transform when window is resized\n      window.addEventListener('resize', () => {\n        clearTimeout(this.resizeTimeout)\n\n        this.resizeTimeout = setTimeout(() => {\n          this.setContentWrapPush()\n        }, 200)\n      })\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return this\n  }\n\n  isValidPosition (position = null) {\n    return ['left', 'right', 'top', 'bottom'].indexOf(position) >= 0\n  }\n\n  addBar (bar) {\n    try {\n      // Get bar configuration\n      var position = bar.getAttribute('data-offcanvas-bar')\n\n      // Validate required elements\n      if (!this.mainWrap || !this.contentWrap) return this\n\n      // Validate position\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: left, right, top, bottom'\n\n      // Check that bar is not already defined\n      if (this.bars[position]) throw 'Duplicate bar with position \\'' + position + '\\''\n\n      // Create new bar object\n      const newBar = new OffCanvasBar()\n      newBar.element = bar\n      newBar.init()\n\n      // Insert new bar\n      this.bars[position] = newBar\n\n      this.debug('Added bar \\'' + position + '\\' with mode \\'' + newBar.mode + '\\'')\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return this\n  }\n\n  open (position = null, button = null) {\n    try {\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: left, right, top, bottom'\n\n      const bar = this.bars[position]\n\n      if (!bar) throw 'Bar with position \\'' + position + '\\' is not defined. Use one of the following: ' + Object.keys(this.bars).join(', ') + '.'\n      if (bar.element.classList.contains('offcanvas-bar--open')) return\n\n      // Close other bars\n      this.close()\n\n      // Open bar\n      this.debug('Opening bar \\'' + position + '\\'')\n      bar.enableFocus()\n      bar.element.classList.add('offcanvas-bar--open')\n\n      // Mark this bar as open\n      this.currentOpenBar = bar\n\n      // Push content wrap if needed\n      this.setContentWrapPush()\n\n      // Remember the button which was used to open off-canvas\n      this.previousOpenButton = button\n\n      // Show overlay\n      this.showOverlay()\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return this\n  }\n\n  toggle (position = null, button = null) {\n    try {\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: left, right, top, bottom'\n\n      if (this.currentOpenBar && this.currentOpenBar.position == position) {\n        this.close()\n      } else {\n        this.close()\n        this.open(position, button)\n      }\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return this\n  }\n\n  close () {\n    try {\n      if (!this.currentOpenBar) return\n\n      // Close bar\n      this.debug('Closing bar \\'' + this.currentOpenBar.position + '\\'')\n      this.currentOpenBar.disableFocus()\n      this.currentOpenBar.element.classList.remove('offcanvas-bar--open')\n      this.currentOpenBar = null\n\n      // Focus open button which was used to open the bar\n      if (this.previousOpenButton) {\n        this.previousOpenButton.focus()\n        this.previousOpenButton = null\n      }\n\n      // Remove transforms from wrapper elements\n      this.contentWrap.style.removeProperty('transform')\n      this.mainWrap.style.removeProperty('overflow')\n\n      // Hide overlay\n      this.hideOverlay()\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return this\n  }\n\n  setContentWrapPush () {\n    if (!this.currentOpenBar) return\n    if (!this.currentOpenBar.mode) return\n\n    this.mainWrap.style.overflow = 'hidden'\n\n    if (['push', 'slide'].indexOf(this.currentOpenBar.mode) >= 0) {\n      switch (this.currentOpenBar.position) {\n        case 'left':\n          this.contentWrap.style.transform = 'translateX(' + this.currentOpenBar.element.offsetWidth + 'px)'\n          break\n\n        case 'right':\n          this.contentWrap.style.transform = 'translateX(-' + this.currentOpenBar.element.offsetWidth + 'px)'\n          break\n\n        case 'top':\n          this.contentWrap.style.transform = 'translateY(' + this.currentOpenBar.element.offsetHeight + 'px)'\n          break\n\n        case 'bottom':\n          this.contentWrap.style.transform = 'translateY(-' + this.currentOpenBar.element.offsetHeight + 'px)'\n          break\n      }\n    }\n  }\n\n  showOverlay () {\n    if (!this.overlay) return\n    if (this.overlay.classList.contains('offcanvas-overlay--visible')) return\n\n    this.debug('Showing overlay')\n\n    this.overlay.classList.add('offcanvas-overlay--visible')\n  }\n\n  hideOverlay () {\n    if (!this.overlay) return\n    if (!this.overlay.classList.contains('offcanvas-overlay--visible')) return\n\n    this.debug('Hiding overlay')\n\n    this.overlay.classList.remove('offcanvas-overlay--visible')\n  }\n}\n\nclass OffCanvasBar {\n\n  constructor() {\n    this.element = null\n    this.position = null\n    this.mode = 'float'\n    this.focusableElementSelector = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n  }\n\n  init () {\n    // Check that defined bar element exists\n    if (!this.element) throw 'Bar element for \\'' + this.position + '\\' was not found!'\n\n    // Set position\n    this.position = this.element.getAttribute('data-offcanvas-bar')\n    if (!this.position) throw 'Missing position for bar'\n\n    // Set mode\n    if (this.element.getAttribute('data-offcanvas-bar-mode')) {\n      this.mode = this.element.getAttribute('data-offcanvas-bar-mode')\n    }\n\n    // Validate mode\n    if (['float', 'push', 'slide'].indexOf(this.mode) < 0) throw 'Invalid mode \\'' + this.mode + '\\' for bar \\'' + this.position + '\\'. Use one of the following values: float, push, slide.'\n\n    // Disable focus\n    this.disableFocus()\n\n    return this\n  }\n\n  disableFocus () {\n    // Disable focus on bar child elements\n    this.element.querySelectorAll(this.focusableElementSelector).forEach(item => {\n      item.setAttribute('tabindex', '-1')\n    })\n\n    // Disable focus on bar\n    this.element.setAttribute('tabindex', '-1')\n    this.element.setAttribute('aria-hidden', 'true')\n\n    return this\n  }\n\n  enableFocus () {\n    // Enable focus on bar child elements\n    this.element.querySelectorAll(this.focusableElementSelector).forEach(item => {\n      item.removeAttribute('tabindex')\n    })\n\n    // Enable focus on bar\n    this.element.removeAttribute('aria-hidden')\n    this.element.setAttribute('tabindex', '0')\n\n    // Focus on bar\n    this.element.focus()\n\n    return this\n  }\n\n}"]}