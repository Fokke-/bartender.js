{"version":3,"file":"Bartender.js","sources":["../src/lib/utils.ts","../src/lib/BartenderError.ts","../src/lib/Overlay.ts","../src/lib/Bar.ts","../src/lib/PushElement.ts","../src/lib/Bartender.ts"],"sourcesContent":["import type { BartenderElementQuery } from './types'\n\n/**\n * Resolve HTML element\n *\n * @param {string|Element|null} query - Selector string or element\n * @param {object} parent - Parent element\n * @param {boolean} directChild - Match only to the direct child\n * @returns {HTMLElement|null} Resolved element\n */\nexport const resolveElement = (\n  query: BartenderElementQuery,\n  parent: Document | HTMLElement = document,\n  directChild = false\n): HTMLElement | null => {\n  if (!query) return null\n  if (query instanceof Element) return query as HTMLElement\n  if (typeof query === 'string') {\n    if (directChild) {\n      return parent.querySelector(`:scope > ${query}`) as HTMLElement\n    }\n\n    return parent.querySelector(query) as HTMLElement\n  }\n\n  return null\n}\n\n/**\n * Sleep for given number of milliseconds\n *\n * @param {number} duration - Duration in milliseconds\n * @returns {Promise<void>}\n */\nexport const sleep = (duration = 100): Promise<void> => {\n  return new Promise(resolve => {\n    if (!duration) return resolve()\n\n    return setTimeout(resolve, duration)\n  })\n}\n","/**\n * Bartender error\n */\nexport class BartenderError extends Error {\n\n  /**\n   * @param {string} message - Error message\n   */\n  constructor (message: string) {\n    super(message)\n    this.name = 'Bartender error'\n  }\n\n}\n","import { BartenderError } from './BartenderError'\n\n/**\n * Bartender overlay\n */\nexport class Overlay {\n\n  /** @property {boolean} _name - Overlay object name */\n  private _name = ''\n\n  /** @property {boolean} _enabled - Enable overlay? */\n  private _enabled = true\n\n  /** @property {HTMLElement} el - Overlay element */\n  readonly el: HTMLElement\n\n  /**\n   * Create a new overlay\n   *\n   * @param {string} name - Overlay object name\n   * @param {boolean} enabled - Enable overlay?\n   */\n  constructor (name: string, enabled = true) {\n    this.el = document.createElement('div')\n    this.el.classList.add('bartender__overlay')\n\n    try {\n      this.name = name\n    } catch (error) {\n      if (error instanceof DOMException) throw new BartenderError(`Name '${name}' is not valid HTML class name`)\n\n      throw new BartenderError(error as string)\n    }\n\n    this.enabled = enabled\n  }\n\n  /**\n   * Destroy overlay instance\n   *\n   * @returns {this}\n   */\n  public destroy (): this {\n    this.el.remove()\n\n    return this\n  }\n\n  /** @type {string} */\n  public get name () {\n    return this._name\n  }\n\n  /** @type {string} */\n  public set name (name: string) {\n    this.el.classList.remove(`bartender__overlay--${this._name}`)\n    this.el.classList.add(`bartender__overlay--${name}`)\n    this._name = name\n  }\n\n  /** @type {boolean} */\n  public get enabled () {\n    return this._enabled\n  }\n\n  /** @type {boolean} */\n  public set enabled (val: boolean) {\n    if (val === true) {\n      this.el.classList.remove('bartender__overlay--transparent')\n    } else {\n      this.el.classList.add('bartender__overlay--transparent')\n    }\n\n    this._enabled = val\n  }\n\n  /**\n   * Show overlay\n   *\n   * @returns {this}\n   */\n  public show (): this {\n    this.el.classList.add('bartender__overlay--visible')\n\n    return this\n  }\n\n  /**\n   * Hide overlay\n   *\n   * @returns {this}\n   */\n  public hide (): this {\n    this.el.classList.remove('bartender__overlay--visible')\n\n    return this\n  }\n\n}\n","import type {\n  BartenderBarOptions,\n  BartenderBarPosition,\n  BartenderBarMode,\n  BartenderPushStyles\n} from './types'\nimport * as focusTrap from 'focus-trap'\nimport { BartenderError } from './BartenderError'\nimport { Overlay } from './Overlay'\nimport {\n  resolveElement,\n  sleep\n} from './utils'\n\n/**\n * Bartender bar\n */\nexport class Bar {\n  /** @property {boolean} debug - Enable debug mode? */\n  public debug = false\n\n  /** @property {boolean} initialized - Is bar initialized? */\n  private initialized = false\n\n  /** @property {Overlay} overlayObj - Overlay object for the bar */\n  readonly overlayObj: Overlay\n\n  /** @property {string} _name - Bar name */\n  private _name = ''\n\n  /** @property {HTMLElement} el - Bar element */\n  readonly el: HTMLElement\n\n  /** @property {string} _position - Bar position */\n  private _position: BartenderBarPosition = 'left'\n\n  /** @property {string} _mode - Bar mode */\n  private _mode: BartenderBarMode = 'float'\n\n  /** @property {boolean} _overlay - Enable overlay? */\n  private _overlay = true\n\n  /** @property {boolean} _permanent - Enable permanent mode? */\n  private _permanent = false\n\n  /** @property {boolean} _scrollTop - Scroll to the top when bar is opened? */\n  private _scrollTop = true\n\n  /** @property {boolean} focusTrap - Enable focus trap? */\n  private focusTrap = false\n\n  /** @property {boolean} isOpened - Is the bar currently open? */\n  private isOpened = false\n\n  /** @property {object|null} trap - Focus trap */\n  private trap: focusTrap.FocusTrap | null = null\n\n  /**\n   * Create a new bar\n   *\n   * @param {string} name - Unique name of the bar\n   * @param {object} options - Bar options\n   * @throws {BartenderError}\n   */\n  constructor (name: string, options: BartenderBarOptions = {}) {\n    if (!name) throw new BartenderError('Bar name is required')\n\n    this.overlayObj = new Overlay(name, this.overlay)\n    this.name = name\n\n    // Get element\n    const el = resolveElement(options.el || null)\n    if (!el) throw new BartenderError(`Content element for bar '${this.name}' is required`)\n    this.el = el\n    this.el.classList.add('bartender__bar')\n    this.el.setAttribute('tabindex', '-1')\n    this.el.setAttribute('aria-hidden', 'true')\n\n    this.position = options.position ?? this._position\n    this.mode = options.mode ?? this._mode\n    this.overlay = options.overlay ?? this._overlay\n    this.permanent = options.permanent ?? this._permanent\n    this.scrollTop = options.scrollTop ?? this._scrollTop\n    this.focusTrap = options.focusTrap ?? this.focusTrap\n\n    if (this.focusTrap === true) {\n      this.trap = focusTrap.createFocusTrap(this.el, {\n        initialFocus: this.el,\n        fallbackFocus: () => {\n          return this.el\n        },\n        escapeDeactivates: false,\n        clickOutsideDeactivates: false,\n        allowOutsideClick: true,\n        returnFocusOnDeactivate: false,\n        preventScroll: true,\n      })\n    }\n\n    this.initialized = true\n  }\n\n  /**\n   * Destroy bar instance\n   *\n   * @returns {this}\n   */\n  destroy (): this {\n    if (this.trap) this.trap.deactivate()\n    this.overlayObj.destroy()\n    this.el.classList.remove('bartender__bar', `bartender__bar--${this.position}`)\n\n    return this\n  }\n\n  /** @type {string} */\n  get name () {\n    return this._name\n  }\n\n  /** @type {string} */\n  set name (name: string) {\n    this._name = name\n    this.overlayObj.name = name\n  }\n\n  /** @type {string} */\n  get position () {\n    return this._position\n  }\n\n  /**\n   * @type {string}\n   * @throws {BartenderError}\n   */\n  set position (position: BartenderBarPosition) {\n    // Validate position\n    if (!position) throw new BartenderError(`Position is required for bar '${this.name}'`)\n\n    const validPositions = [\n      'left',\n      'right',\n      'top',\n      'bottom',\n    ]\n\n    if (!validPositions.includes(position)) throw new BartenderError(`Invalid position '${position}' for bar '${this.name}'. Use one of the following: ${validPositions.join(', ')}.`)\n    if (this.initialized === true && this.position === position) return\n\n    // Temporarily disable transition\n    this.el.classList.add('bartender-disable-transition')\n\n    // Update element classes\n    this.el.classList.remove(`bartender__bar--${this.position}`)\n    this.el.classList.add(`bartender__bar--${position}`)\n\n    // Set new position\n    this._position = position\n\n    // Return transition\n    setTimeout(() => {\n      this.el.classList.remove('bartender-disable-transition')\n    })\n\n    // If position was changed after bar was created,\n    // dispatch event to update pushable elements\n    if (this.initialized === true) {\n      this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n        bubbles: true,\n        detail: { bar: this },\n      }))\n\n      if (this.debug) console.debug('Updated bar position', this)\n    }\n  }\n\n  /** @type {string} */\n  get mode () {\n    return this._mode\n  }\n\n  /**\n   * @type {string}\n   * @throws {BartenderError}\n   */\n  set mode (mode: BartenderBarMode) {\n    // Validate mode\n    if (!mode) throw new BartenderError(`Mode is required for bar '${this.name}'`)\n\n    const validModes = [\n      'float',\n      'push',\n      'reveal',\n    ]\n\n    if (!validModes.includes(mode)) throw new BartenderError(`Invalid mode '${mode}' for bar '${this.name}'. Use one of the following: ${validModes.join(', ')}.`)\n    if (this.initialized === true && this.mode === mode) return\n\n    // Temporarily disable transition\n    this.el.classList.add('bartender-disable-transition')\n\n    // Update element classes\n    this.el.classList.remove(`bartender__bar--${this.mode}`)\n    this.el.classList.add(`bartender__bar--${mode}`)\n\n    // Set new mode\n    this._mode = mode\n\n    // Return transition\n    setTimeout(() => {\n      this.el.classList.remove('bartender-disable-transition')\n    })\n\n    // If mode was changed after bar was created,\n    // dispatch event to update pushable elements\n    if (this.initialized === true) {\n      this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n        bubbles: true,\n        detail: { bar: this },\n      }))\n\n      if (this.debug) console.debug('Updated bar mode', this)\n    }\n  }\n\n  /** @type {boolean} */\n  get overlay () {\n    return this._overlay\n  }\n\n  /** @type {boolean} */\n  set overlay (val: boolean) {\n    if (this.initialized === true && this.overlay === val) return\n\n    this.overlayObj.enabled = val\n    this._overlay = val\n\n    if (this.initialized === true) {\n      this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n        bubbles: true,\n        detail: { bar: this },\n      }))\n\n      if (this.debug) console.debug('Updated bar overlay', this, this.overlayObj)\n    }\n  }\n\n  /** @type {boolean} */\n  get permanent () {\n    return this._permanent\n  }\n\n  /** @type {boolean} */\n  set permanent (val: boolean) {\n    this._permanent = val\n\n    if (this.initialized === true) this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n  }\n\n  /** @type {boolean} */\n  get scrollTop () {\n    return this._scrollTop\n  }\n\n  /** @type {boolean} */\n  set scrollTop (val: boolean) {\n    this._scrollTop = val\n\n    if (this.initialized === true) this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n  }\n\n  /**\n   * Is bar currently open?\n   *\n   * @returns {boolean}\n   */\n  public isOpen (): boolean {\n    return this.isOpened\n  }\n\n  /**\n   * Get transition duration in milliseconds\n   *\n   * @returns {number}\n   */\n  public getTransitionDuration (): number {\n    if (!this.el) return 0\n\n    const duration = window.getComputedStyle(this.el).getPropertyValue('transition-duration') || '0s'\n    return parseFloat(duration) * 1000\n  }\n\n  /**\n   * Open bar\n   *\n   * @returns {Promise<this>}\n   */\n  async open (): Promise<this> {\n    if (this.debug) console.debug('Opening bar', this)\n\n    // Dispatch 'before open' event\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-before-open', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    if (this.scrollTop === true) this.el.scrollTo(0, 0)\n    this.el.classList.add('bartender__bar--open')\n    this.el.setAttribute('aria-hidden', 'false')\n    this.el.focus()\n    this.overlayObj.show()\n    this.isOpened = true\n\n    if (this.trap) this.trap.activate()\n\n    await sleep(this.getTransitionDuration())\n\n    // Dispatch 'after open' event\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-after-open', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    if (this.debug) console.debug('Finished opening bar', this)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Close bar\n   *\n   * @returns {Promise<this>}\n   */\n  async close (): Promise<this> {\n    if (this.debug) console.debug('Closing bar', this)\n\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-before-close', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    this.el.classList.remove('bartender__bar--open')\n    this.el.setAttribute('aria-hidden', 'true')\n    this.overlayObj.hide()\n    this.isOpened = false\n    if (this.trap) this.trap.deactivate()\n\n    await sleep(this.getTransitionDuration())\n\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-after-close', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    if (this.debug) console.debug('Finished closing bar', this)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Get styles for pushable elements\n   *\n   * @returns {object}\n   */\n  getPushStyles (): BartenderPushStyles {\n    if (!this.position || !this.el) {\n      return {\n        transform: '',\n        transitionDuration: '',\n        transitionTimingFunction: '',\n      }\n    }\n\n    return {\n      transform: {\n        left: `translateX(${this.el.offsetWidth}px)`,\n        right: `translateX(-${this.el.offsetWidth}px)`,\n        top: `translateY(${this.el.offsetHeight}px)`,\n        bottom: `translateY(-${this.el.offsetHeight}px)`,\n      }[this.position] || '',\n      transitionDuration: window.getComputedStyle(this.el).getPropertyValue('transition-duration') || '',\n      transitionTimingFunction: window.getComputedStyle(this.el).getPropertyValue('transition-timing-function') || '',\n    }\n  }\n}\n","import type {\n  BartenderPushElementOptions,\n  BartenderBarMode,\n  BartenderPushStyles,\n  BartenderBarPosition\n} from './types'\nimport { BartenderError } from './BartenderError'\nimport { Bar } from './Bar'\nimport { resolveElement } from './utils'\n\n/**\n * Bartender pushable element\n */\nexport class PushElement {\n\n  /** @property {HTMLElement} el - Element to push */\n  readonly el: HTMLElement\n\n  /** @property {Bar[]} bars - Matched bars */\n  readonly bars: Bar[]\n\n  /** @property {string[]} modes - Matched modes */\n  readonly modes: BartenderBarMode[]\n\n  /** @property {string[]} positions - Matched positions */\n  readonly positions: BartenderBarPosition[]\n\n  /** @property {boolean} isPushed - Is the element currently pushed? */\n  private isPushed = false\n\n  /**\n   * Create a new pushable element\n   *\n   * @param {object} options - Options for pushable element\n   * @throws {BartenderError}\n   */\n  constructor (options: BartenderPushElementOptions = {}) {\n    // Get element\n    const el = resolveElement(options.el || null)\n    if (!el) throw new BartenderError('Element is required for push element')\n    this.el = el\n\n    this.bars = options.bars || []\n    this.modes = options.modes || []\n    this.positions = options.positions || []\n  }\n\n  /**\n   * Push element\n   *\n   * @param {Bar} bar - The bar to match against push element properties\n   * @param {object} pushStyles - Push styles from the bar\n   * @returns {this}\n   */\n  public push (bar: Bar, pushStyles: BartenderPushStyles): this {\n    // If this element is not supposed to be pushed,\n    // clear transition styles\n    if (\n      (this.bars.length && !this.bars.includes(bar)) ||\n      (this.modes.length && !this.modes.includes(bar.mode)) ||\n      (this.positions.length && !this.positions.includes(bar.position))\n    ) {\n      this.el.style.transform = ''\n      this.el.style.transitionTimingFunction = ''\n      this.el.style.transitionDuration = ''\n      this.isPushed = false\n\n      return this\n    }\n\n    this.el.style.transform = pushStyles.transform\n    this.el.style.transitionTimingFunction = pushStyles.transitionTimingFunction\n    this.el.style.transitionDuration = pushStyles.transitionDuration\n    this.isPushed = true\n\n    return this\n  }\n\n  /**\n   * Pull element and return it to the original position\n   *\n   * @param {object} pushStyles - Push styles from the bar\n   * @returns {this}\n   */\n  public pull (pushStyles: BartenderPushStyles): this {\n    if (this.isPushed === false) return this\n\n    this.el.style.transform = 'translateX(0) translateY(0)'\n    this.el.style.transitionTimingFunction = pushStyles.transitionTimingFunction\n    this.el.style.transitionDuration = pushStyles.transitionDuration\n    this.isPushed = false\n\n    return this\n  }\n\n}\n","import type {\n  BartenderOptions,\n  BartenderBarOptions,\n  BartenderPushElementOptions\n} from './types'\nimport * as focusTrap from 'focus-trap'\nimport { Queue } from 'async-await-queue'\nimport { debounce } from 'ts-debounce'\nimport {\n  resolveElement,\n  sleep\n} from './utils'\nimport { BartenderError } from './BartenderError'\nimport { Bar } from './Bar'\nimport { PushElement } from './PushElement'\n\n/**\n * Class for creating accessible off-canvas bars.\n */\nexport class Bartender {\n\n  /** @property {boolean} debug - Enable debug mode? */\n  private _debug = false\n\n  /** @property {HTMLElement} el - Main element */\n  readonly el: HTMLElement\n\n  /** @property {HTMLElement} contentEl - Content element */\n  readonly contentEl: HTMLElement\n\n  /** @property {number} switchTimeout - Time to wait in milliseconds until another bar is opened */\n  readonly switchTimeout: number = 150\n\n  /** @property {HTMLElement|null} fixedElementContainer - Reference to the fixed element container */\n  readonly fixedElementContainer: HTMLElement | null = null\n\n  /** @property {boolean} focusTrap - Enable focus trap? */\n  readonly focusTrap: boolean = false\n\n  /** @property {Bar[]} bars - Bars added to the instance */\n  readonly bars: Bar[] = []\n\n  /** @property {object} barDefaultOptions - Default options for the bars */\n  readonly barDefaultOptions: BartenderBarOptions = {\n    el: null,\n    position: 'left',\n    mode: 'float',\n    overlay: true,\n    permanent: false,\n    scrollTop: true,\n  }\n\n  /** @property {HTMLElement|null} previousOpenButton - Reference to the previous open button */\n  private previousOpenButton?: HTMLElement | null = null\n\n  /** @property {PushElement[]} pushableElements - Pushable elements added to the instance */\n  private pushableElements: PushElement[] = []\n\n  /** @property {object|null} trap - Focus trap */\n  private trap: focusTrap.FocusTrap | null = null\n\n  /** @property {object} queue - Queue for actions */\n  private queue: Queue\n\n  /** @property {Function} resizeDebounce - Debouncer for resizing */\n  private resizeDebounce\n\n  /** @property {Function} resizeDebounce - Debouncer for resizing */\n  private onBarUpdateHandler\n\n  /** @property {Function} onKeydownHandler - Handler for keydown event */\n  private onKeydownHandler\n\n  /** @property {Function} onKeydownHandler - Handler for resize event */\n  private onResizeHandler\n\n  /**\n   * Create a new Bartender instance\n   *\n   * @param {object} options - Instance options\n   * @param {object} barOptions - Default options for bars\n   * @throws {BartenderError}\n   */\n  constructor (\n    options: BartenderOptions = {},\n    barOptions: BartenderBarOptions = {}\n  ) {\n    this.debug = options.debug ?? this._debug\n    this.switchTimeout = options.switchTimeout ?? this.switchTimeout\n    this.focusTrap = options.focusTrap ?? this.focusTrap\n    this.barDefaultOptions = {\n      ...this.barDefaultOptions,\n      ...barOptions,\n      focusTrap: this.focusTrap,\n    }\n\n    // Main element\n    const el = resolveElement(options.el || '.bartender')\n    if (!el) throw new BartenderError('Main element is required')\n    this.el = el\n    this.el.classList.add('bartender')\n\n    // Content element\n    const contentEl = resolveElement(options.contentEl || '.bartender__content')\n    if (!contentEl) throw new BartenderError('Content element is required')\n    if (contentEl.parentElement !== this.el) throw new BartenderError('Content element must be a direct child of the main element')\n    this.contentEl = contentEl\n    this.contentEl.classList.add('bartender__content')\n    this.contentEl.setAttribute('tabindex', '-1')\n\n    // Register content element as pushable element\n    this.addPushElement({\n      el: this.contentEl,\n      modes: [\n        'push',\n        'reveal',\n      ],\n    })\n\n    // Fixed element container\n    this.fixedElementContainer = resolveElement(\n      options.fixedElementContainer || '.bartender__fixedElementContainer',\n      this.el\n    )\n\n    // Create focus trap\n    if (this.focusTrap === true) {\n      const containerNodes: Array<HTMLElement | null> = [\n        this.contentEl,\n        this.fixedElementContainer,\n      ].filter(item => !!item)\n\n      this.trap = focusTrap.createFocusTrap(containerNodes as HTMLElement[], {\n        initialFocus: this.contentEl,\n        fallbackFocus: () => {\n          return this.contentEl\n        },\n        escapeDeactivates: false,\n        clickOutsideDeactivates: false,\n        allowOutsideClick: false,\n        returnFocusOnDeactivate: false,\n        preventScroll: true,\n      })\n      this.trap.activate()\n    }\n\n    // Queue for actions\n    this.queue = new Queue(1)\n\n    // Debouncer for resizing\n    this.resizeDebounce = debounce(() => {\n      this.pushElements(this.getOpenBar())\n    }, 100)\n\n    // Event listeners\n    this.onBarUpdateHandler = this.onBarUpdate.bind(this)\n    window.addEventListener('bartender-bar-update', this.onBarUpdateHandler)\n\n    this.onKeydownHandler = this.onKeydown.bind(this)\n    window.addEventListener('keydown', this.onKeydownHandler)\n\n    this.onResizeHandler = this.onResize.bind(this)\n    window.addEventListener('resize', this.onResizeHandler)\n\n    this.el.classList.add('bartender--ready')\n    this.el.dispatchEvent(new CustomEvent('bartender-init', {\n      bubbles: true,\n      detail: { bartender: this },\n    }))\n\n    if (this.debug) console.debug('Bartender initialized', this)\n  }\n\n  /** @type {boolean} */\n  get debug () {\n    return this._debug\n  }\n\n  /** @type {boolean} */\n  set debug (val: boolean) {\n    this._debug = val\n\n    for (const bar of this.bars) {\n      bar.debug = val\n    }\n  }\n\n  /**\n   * Destroy Bartender instance\n   *\n   * @returns {Promise<this>}\n   */\n  public async destroy (): Promise<this> {\n    await this.close()\n\n    // Get all bar names\n    const barNames = this.bars.reduce((acc: string[], bar) => {\n      acc.push(bar.name)\n      return acc\n    }, [])\n\n    // Remove bars\n    for (const name of barNames) {\n      if (!this.getBar(name)) continue\n\n      await this.removeBar(name)\n    }\n\n    // Remove classes\n    this.el.classList.remove('bartender', 'bartender--ready')\n    this.contentEl.classList.remove('bartender__content')\n\n    // Destroy focus trap\n    if (this.trap) this.trap.deactivate()\n\n    // Remove event listeners\n    window.removeEventListener('bartender-bar-update', this.onBarUpdateHandler)\n    window.removeEventListener('keydown', this.onKeydownHandler)\n    window.removeEventListener('resize', this.onResizeHandler)\n\n    this.el.dispatchEvent(new CustomEvent('bartender-destroyed', {\n      bubbles: true,\n      detail: { bartender: this },\n    }))\n\n    if (this.debug) console.debug('Bartender destroyed', this)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Get bar by name\n   *\n   * @param {string} name - Bar name\n   * @returns {object|null}\n   */\n  public getBar (name: string): Bar | null {\n    return this.bars.find(item => item.name === name) || null\n  }\n\n  /**\n   * Get currently open bar\n   *\n   * @returns {object|null}\n   */\n  private getOpenBar (): Bar | null {\n    return this.bars.find(item => item.isOpen() === true) || null\n  }\n\n  /**\n   * Add a new bar\n   *\n   * @param {string} name - Unique name of the bar\n   * @param {object} options - Bar options\n   * @throws {BartenderError}\n   * @returns {object} Bar object\n   */\n  public addBar (name: string, options: BartenderBarOptions = {}): Bar {\n    if (!name || typeof name !== 'string') throw new BartenderError('Bar name is required')\n    if (this.getBar(name)) throw new BartenderError(`Bar with name '${name}' is already defined`)\n\n    // Create a new bar\n    const bar = new Bar(name, {\n      ...this.barDefaultOptions,\n      ...options,\n    })\n\n    // Set debug mode for bar\n    bar.debug = this.debug\n\n    // Check that bar element is a direct child on main element\n    if (bar.el.parentElement !== this.el) throw new BartenderError(`Element of bar '${bar.name}' must be a direct child of the Bartender main element`)\n\n    // Insert overlay element\n    this.contentEl?.appendChild(bar.overlayObj.el)\n    bar.overlayObj.el.addEventListener('click', () => {\n      if (bar.permanent === true) return\n\n      this.close()\n    })\n\n    this.bars.push(bar)\n\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-added', {\n      bubbles: true,\n      detail: { bar },\n    }))\n\n    if (this.debug) console.debug('Added a new bar', bar)\n\n    return bar\n  }\n\n  /**\n   * Remove bar\n   *\n   * @param {string} name - Bar name\n   * @throws {BartenderError}\n   * @returns {Promise<this>}\n   */\n  public async removeBar (name: string): Promise<this> {\n    if (!name || typeof name !== 'string') throw new BartenderError('Bar name is required')\n\n    const bar = this.getBar(name)\n    if (!bar) throw new BartenderError(`Bar with name '${name}' was not found`)\n    if (this.getOpenBar() === bar) await this.close()\n\n    bar.destroy()\n\n    const barIndex = this.bars.findIndex(item => item.name === name)\n    this.bars.splice(barIndex, 1)\n\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-removed', {\n      bubbles: true,\n      detail: { name },\n    }))\n\n    if (this.debug) console.debug(`Removed bar '${name}'`)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Open bar\n   *\n   * @param {string} name - Bar name\n   * @throws {BartenderError}\n   * @returns {Promise<Bar>}\n   */\n  private async openBar (name: string): Promise<Bar> {\n    const bar = this.getBar(name)\n    if (!bar) throw new BartenderError(`Unknown bar '${name}'`)\n    if (bar.isOpen() === true) return Promise.resolve(bar)\n\n    // Close any open bar\n    const openBar = this.getOpenBar()\n\n    if (openBar) {\n      await this.closeBar(openBar.name, true)\n      await sleep(this.switchTimeout)\n    }\n\n    if (this.trap) this.trap.pause()\n    this.el.classList.add('bartender--open')\n    this.contentEl.setAttribute('aria-hidden', 'true')\n    this.pushElements(bar)\n\n    return bar.open()\n  }\n\n  /**\n   * Open bar\n   *\n   * @param {string} name - Bar name\n   * @param {HTMLElement|null} button - Reference to the element which was used to open the bar\n   * @returns {Promise<Bar>}\n   */\n  public async open (name: string, button?: HTMLElement | null): Promise<Bar> {\n    const id = Symbol()\n    await this.queue.wait(id)\n\n    // Store reference to the button which was used to open the bar.\n    this.previousOpenButton = button\n\n    return this.openBar(name).finally(() => {\n      this.queue.end(id)\n    })\n  }\n\n  /**\n   * Close bar\n   *\n   * @param {string} name - Bar name\n   * @param {boolean} switching - Will another bar open immediately after closing?\n   * @returns {Promise<Bar|null>}\n   */\n  private async closeBar (name?: string, switching = false): Promise<Bar | null> {\n    const bar = name ? this.getBar(name) : this.getOpenBar()\n    if (!bar || !bar.isOpen()) return Promise.resolve(null)\n\n    this.pullElements(bar)\n    await bar.close()\n\n    // If we going to open right after closing the current one,\n    // don't update elements yet.\n    if (switching === false) {\n      this.el.classList.remove('bartender--open')\n      this.contentEl.setAttribute('aria-hidden', 'false')\n    }\n\n    return Promise.resolve(bar)\n  }\n\n  /**\n   * Close bar\n   *\n   * @param {string} name - Bar name\n   * @returns {Promise<Bar|null>}\n   */\n  public async close (name?: string): Promise<Bar | null> {\n    const id = Symbol()\n    await this.queue.wait(id)\n\n    if (this.trap) this.trap.unpause()\n\n    return this.closeBar(name).finally(() => {\n      this.queue.end(id)\n\n      // Focus to the previous open button\n      if (this.previousOpenButton) {\n        this.previousOpenButton.focus()\n        this.previousOpenButton = null\n      } else {\n        this.contentEl.focus()\n      }\n    })\n  }\n\n  /**\n   * Toggle bar\n   *\n   * @param {string} name - Bar name\n   * @param {HTMLElement|null} button - Reference to the element which was used to toggle the bar\n   * @throws {BartenderError}\n   * @returns {Promise<Bar|null>}\n   */\n  public async toggle (name: string, button?: HTMLElement | null): Promise<Bar | null> {\n    const bar = this.getBar(name)\n    if (!bar) throw new BartenderError(`Unknown bar '${name}'`)\n\n    return (bar.isOpen() === true) ? this.close() : this.open(name, button)\n  }\n\n  /**\n   * Add a new pushable element\n   *\n   * @param {object} options - Options for pushable element\n   * @returns {PushElement}\n   */\n  public addPushElement (options: BartenderPushElementOptions = {}): PushElement {\n    const pushElement = new PushElement(options)\n    this.pushableElements.push(pushElement)\n\n    if (this.debug) console.debug('Added a new pushable element', pushElement)\n\n    return pushElement\n  }\n\n  /**\n   * Remove pushable element\n   *\n   * @param {Element} el - Element to remove\n   * @throws {BartenderError}\n   * @returns {PushElement[]}\n   */\n  public removePushElement (el: Element): PushElement[] {\n    const index = this.pushableElements.findIndex(item => item.el === el)\n    if (index === -1) throw new BartenderError('Pushable element was not found')\n\n    if (this.debug) console.debug('Removed pushable element', this.pushableElements[index])\n    this.pushableElements.splice(index, 1)\n\n    return this.pushableElements\n  }\n\n  /**\n   * Push elements\n   *\n   * @param {Bar|null} bar - The bar from which the styles are fetched\n   * @returns {PushElement[]}\n   */\n  private pushElements (bar: Bar | null): PushElement[] {\n    if (!bar || !this.pushableElements.length) return this.pushableElements\n\n    const pushStyles = bar.getPushStyles()\n\n    for (const item of this.pushableElements) {\n      item.push(bar, pushStyles)\n    }\n\n    return this.pushableElements\n  }\n\n  /**\n   * Pull elements and return them to the original position\n   *\n   * @param {Bar|null} bar - The bar from which the styles are fetched\n   * @returns {PushElement[]}\n   */\n  private pullElements (bar: Bar | null): PushElement[] {\n    if (!bar || !this.pushableElements.length) return this.pushableElements\n\n    const pushStyles = bar.getPushStyles()\n\n    for (const item of this.pushableElements) {\n      item.pull(pushStyles)\n    }\n\n    return this.pushableElements\n  }\n\n  /**\n   * Handler for bartender-bar-update event\n   *\n   * @returns {void}\n   */\n  private onBarUpdate (): void {\n    this.pushElements(this.getOpenBar())\n  }\n\n  /**\n   * Handler for keydown event\n   *\n   * @param {KeyboardEvent} event\n   * @returns {void}\n   */\n  private onKeydown (event: KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      const openBar = this.getOpenBar()\n      if (!openBar || openBar.permanent === true) return\n\n      this.close()\n    }\n  }\n\n  /**\n   * Handler for resize event\n   *\n   * @returns {void}\n   */\n  private onResize (): void {\n    this.resizeDebounce()\n  }\n\n}\n"],"names":["resolveElement","query","parent","directChild","sleep","duration","resolve","BartenderError","message","Overlay","name","enabled","__publicField","error","val","Bar","options","el","_a","_b","_c","_d","_e","_f","focusTrap","position","validPositions","mode","validModes","__async","PushElement","bar","pushStyles","Bartender","barOptions","__spreadProps","__spreadValues","contentEl","containerNodes","item","Queue","debounce","barNames","acc","barIndex","openBar","button","id","switching","pushElement","index","event"],"mappings":"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"}