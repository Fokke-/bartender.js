{"version":3,"file":"Bartender.js","sources":["../src/lib/utils.ts","../src/lib/BartenderError.ts","../src/lib/Overlay.ts","../src/lib/Bar.ts","../src/lib/PushElement.ts","../src/lib/Bartender.ts"],"sourcesContent":["import type { BartenderElementQuery } from './types'\n\n/**\n * Resolve HTML element\n *\n * @param query\n * @returns Resolved element or null if none found\n */\nexport const resolveElement = (query: BartenderElementQuery): HTMLElement | null => {\n  if (!query) return null\n  if (typeof query === 'string') return document.querySelector(query) as HTMLElement\n  if (query instanceof Element) return query as HTMLElement\n\n  return null\n}\n\nexport const sleep = (duration = 100): Promise<void> => {\n  return new Promise(resolve => {\n    if (!duration) return resolve()\n\n    return setTimeout(resolve, duration)\n  })\n}\n","export class BartenderError extends Error {\n  constructor (message: string) {\n    super(message)\n    this.name = 'Bartender error'\n  }\n}\n","import { BartenderError } from './BartenderError'\n\nexport class Overlay {\n  private _name = ''\n  private _enabled = true\n  readonly el: HTMLElement\n\n  constructor (name: string, enabled = true) {\n    this.el = document.createElement('div')\n    this.el.classList.add('bartender__overlay')\n\n    try {\n      this.name = name\n    } catch (error) {\n      if (error instanceof DOMException) throw new BartenderError(`Name '${name}' is not valid HTML class name`)\n\n      throw new BartenderError(error as string)\n    }\n\n    this.enabled = enabled\n  }\n\n  public destroy (): this {\n    this.el.remove()\n\n    return this\n  }\n\n  public get name () {\n    return this._name\n  }\n\n  public set name (name: string) {\n    this.el.classList.remove(`bartender__overlay--${this._name}`)\n    this.el.classList.add(`bartender__overlay--${name}`)\n    this._name = name\n  }\n\n  public get enabled () {\n    return this._enabled\n  }\n\n  public set enabled (val: boolean) {\n    if (val === true) {\n      this.el.classList.remove('bartender__overlay--transparent')\n    } else {\n      this.el.classList.add('bartender__overlay--transparent')\n    }\n\n    this._enabled = val\n  }\n\n  public show (): this {\n    this.el.classList.add('bartender__overlay--visible')\n\n    return this\n  }\n\n  public hide (): this {\n    this.el.classList.remove('bartender__overlay--visible')\n\n    return this\n  }\n}\n","import type {\n  BartenderBarOptions,\n  BartenderBarPosition,\n  BartenderBarMode,\n  BartenderPushStyles\n} from './types'\nimport * as focusTrap from 'focus-trap'\nimport { BartenderError } from './BartenderError'\nimport { Overlay } from './Overlay'\nimport {\n  resolveElement,\n  sleep\n} from './utils'\n\nexport class Bar {\n  private ready = false\n  readonly overlayObj: Overlay\n  private _name = ''\n  readonly el: HTMLElement\n  private _position: BartenderBarPosition = 'left'\n  private _mode: BartenderBarMode = 'float'\n  private _overlay = true\n  private _permanent = false\n  private _scrollTop = true\n  private focusTrap = false\n  private isOpened = false\n  private trap: focusTrap.FocusTrap | null = null\n\n  constructor (name: string, options: BartenderBarOptions = {}) {\n    if (!name) throw 'Bar name is required'\n\n    this.overlayObj = new Overlay(name, this.overlay)\n    this.name = name\n\n    // Get element\n    const el = resolveElement(options.el || null)\n    if (!el) throw new BartenderError(`Content element for bar '${this.name}' is required`)\n    this.el = el\n    this.el.classList.add('bartender__bar')\n    this.el.setAttribute('tabindex', '-1')\n    this.el.setAttribute('aria-hidden', 'true')\n\n    this.position = options.position ?? this.position\n    this.mode = options.mode ?? this._mode\n    this.overlay = options.overlay ?? this._overlay\n    this.permanent = options.permanent ?? this._permanent\n    this.scrollTop = options.scrollTop ?? this._scrollTop\n    this.focusTrap = options.focusTrap ?? this.focusTrap\n\n    if (this.focusTrap === true) {\n      this.trap = focusTrap.createFocusTrap(this.el, {\n        initialFocus: this.el,\n        fallbackFocus: () => {\n          return this.el\n        },\n        escapeDeactivates: false,\n        clickOutsideDeactivates: false,\n        allowOutsideClick: true,\n        returnFocusOnDeactivate: false,\n        preventScroll: true,\n      })\n    }\n\n    this.ready = true\n  }\n\n  destroy (removeElement = false): this {\n    if (removeElement === true) this.el.remove()\n    if (this.trap) this.trap.deactivate()\n    this.overlayObj.destroy()\n\n    return this\n  }\n\n  get name () {\n    return this._name\n  }\n\n  set name (name: string) {\n    this._name = name\n    this.overlayObj.name = name\n  }\n\n  get position () {\n    return this._position\n  }\n\n  set position (position: BartenderBarPosition) {\n    // Validate position\n    if (!position) throw `Position is required for bar '${this.name}'`\n\n    const validPositions = [\n      'left',\n      'right',\n      'top',\n      'bottom',\n    ]\n\n    if (!validPositions.includes(position)) throw `Invalid position '${position}' for bar '${this.name}'. Use one of the following: ${validPositions.join(', ')}.`\n\n    // Temporarily disable transition\n    this.el.classList.add('bartender-disable-transition')\n\n    // Update element classes\n    this.el.classList.remove(`bartender__bar--${this.position}`)\n    this.el.classList.add(`bartender__bar--${position}`)\n\n    // Set new position\n    this._position = position\n\n    // Return transition\n    setTimeout(() => {\n      this.el.classList.remove('bartender-disable-transition')\n    })\n\n    // If position was changed after bar was created,\n    // dispatch event to update pushable elements\n    if (this.ready === true) this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n  }\n\n  get mode () {\n    return this._mode\n  }\n\n  set mode (mode: BartenderBarMode) {\n    // Validate mode\n    if (!mode) throw `Mode is required for bar '${this.name}'`\n\n    const validModes = [\n      'float',\n      'push',\n      'reveal',\n    ]\n\n    if (!validModes.includes(mode)) throw `Invalid mode '${mode}' for bar '${this.name}'. Use one of the following: ${validModes.join(', ')}.`\n\n    // Temporarily disable transition\n    this.el.classList.add('bartender-disable-transition')\n\n    // Update element classes\n    this.el.classList.remove(`bartender__bar--${this.mode}`)\n    this.el.classList.add(`bartender__bar--${mode}`)\n\n    // Set new mode\n    this._mode = mode\n\n    // Return transition\n    setTimeout(() => {\n      this.el.classList.remove('bartender-disable-transition')\n    })\n\n    // If mode was changed after bar was created,\n    // dispatch event to update pushable elements\n    if (this.ready === true) this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n  }\n\n  get overlay () {\n    return this._overlay\n  }\n\n  set overlay (val: boolean) {\n    this.overlayObj.enabled = val\n    this._overlay = val\n\n    if (this.ready === true) this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n  }\n\n  get permanent () {\n    return this._permanent\n  }\n\n  set permanent (val: boolean) {\n    this._permanent = val\n\n    if (this.ready === true) this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n  }\n\n  get scrollTop () {\n    return this._scrollTop\n  }\n\n  set scrollTop (val: boolean) {\n    this._scrollTop = val\n\n    if (this.ready === true) this.el.dispatchEvent(new CustomEvent('bartender-bar-update', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n  }\n\n  public isOpen (): boolean {\n    return this.isOpened\n  }\n\n  public getTransitionDuration (): number {\n    if (!this.el) return 0\n\n    const duration = window.getComputedStyle(this.el).getPropertyValue('transition-duration') || '0s'\n    return parseFloat(duration) * 1000\n  }\n\n  async open (): Promise<this> {\n    // Dispatch 'before open' event\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-before-open', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    if (this.scrollTop === true) this.el.scrollTo(0, 0)\n    this.el.classList.add('bartender__bar--open')\n    this.el.setAttribute('aria-hidden', 'false')\n    this.el.focus()\n    this.overlayObj.show()\n    this.isOpened = true\n\n    if (this.trap) this.trap.activate()\n\n    await sleep(this.getTransitionDuration())\n\n    // Dispatch 'after open' event\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-after-open', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    return Promise.resolve(this)\n  }\n\n  async close (): Promise<this> {\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-before-close', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    this.el.classList.remove('bartender__bar--open')\n    this.el.setAttribute('aria-hidden', 'true')\n    this.overlayObj.hide()\n    this.isOpened = false\n    if (this.trap) this.trap.deactivate()\n\n    await sleep(this.getTransitionDuration())\n\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-after-close', {\n      bubbles: true,\n      detail: { bar: this },\n    }))\n\n    return Promise.resolve(this)\n  }\n\n  getPushStyles (): BartenderPushStyles {\n    if (!this.position || !this.el) {\n      return {\n        transform: '',\n        transitionDuration: '',\n        transitionTimingFunction: '',\n      }\n    }\n\n    return {\n      transform: {\n        left: `translateX(${this.el.offsetWidth}px)`,\n        right: `translateX(-${this.el.offsetWidth}px)`,\n        top: `translateY(${this.el.offsetHeight}px)`,\n        bottom: `translateY(-${this.el.offsetHeight}px)`,\n      }[this.position] || '',\n      transitionDuration: window.getComputedStyle(this.el).getPropertyValue('transition-duration') || '',\n      transitionTimingFunction: window.getComputedStyle(this.el).getPropertyValue('transition-timing-function') || '',\n    }\n  }\n}\n","import type {\n  BartenderPushElementOptions,\n  BartenderBarMode,\n  BartenderPushStyles,\n  BartenderBarPosition\n} from './types'\nimport { BartenderError } from './BartenderError'\nimport { Bar } from './Bar'\nimport { resolveElement } from './utils'\n\nexport class PushElement {\n  private el: HTMLElement\n  readonly bars: Bar[]\n  readonly modes: BartenderBarMode[]\n  readonly positions: BartenderBarPosition[]\n  private isPushed = false\n\n  constructor (options: BartenderPushElementOptions = {}) {\n    // Get element\n    const el = resolveElement(options.el || null)\n    if (!el) throw new BartenderError('Element is required for push element')\n    this.el = el\n\n    this.bars = options.bars || []\n    this.modes = options.modes || []\n    this.positions = options.positions || []\n  }\n\n  public push (bar: Bar, pushStyles: BartenderPushStyles): this {\n    // If this element is not supposed to be pushed,\n    // clear transition styles\n    if (\n      (this.bars.length && !this.bars.includes(bar)) ||\n      (this.modes.length && !this.modes.includes(bar.mode)) ||\n      (this.positions.length && !this.positions.includes(bar.position))\n    ) {\n      this.el.style.transform = ''\n      this.el.style.transitionTimingFunction = ''\n      this.el.style.transitionDuration = ''\n      this.isPushed = false\n\n      return this\n    }\n\n    this.el.style.transform = pushStyles.transform\n    this.el.style.transitionTimingFunction = pushStyles.transitionTimingFunction\n    this.el.style.transitionDuration = pushStyles.transitionDuration\n    this.isPushed = true\n\n    return this\n  }\n\n  public pull (pushStyles: BartenderPushStyles): this {\n    if (this.isPushed === false) return this\n\n    this.el.style.transform = 'translateX(0) translateY(0)'\n    this.el.style.transitionTimingFunction = pushStyles.transitionTimingFunction\n    this.el.style.transitionDuration = pushStyles.transitionDuration\n    this.isPushed = false\n\n    return this\n  }\n}\n","import type {\n  BartenderOptions,\n  BartenderBarOptions,\n  BartenderPushElementOptions\n} from './types'\nimport * as focusTrap from 'focus-trap'\nimport { Queue } from 'async-await-queue'\nimport { debounce } from 'ts-debounce'\nimport {\n  resolveElement,\n  sleep\n} from './utils'\nimport { BartenderError } from './BartenderError'\nimport { Bar } from './Bar'\nimport { PushElement } from './PushElement'\n\nexport class Bartender {\n  // TODO: add debug mode\n\n  public debug = false\n  readonly el: HTMLElement\n  readonly contentEl: HTMLElement\n  readonly switchTimeout: number = 150\n  readonly focusTrap: boolean = false\n  readonly bars: Bar[] = []\n  readonly barDefaultOptions: BartenderBarOptions = {\n    el: null,\n    position: 'left',\n    mode: 'float',\n    overlay: true,\n    permanent: false,\n    scrollTop: true,\n  }\n  private previousOpenButton?: HTMLElement | null = null\n  private pushableElements: PushElement[] = []\n  private trap: focusTrap.FocusTrap | null = null\n  private queue: Queue\n  private resizeDebounce\n  private onBarUpdateHandler\n  private onKeydownHandler\n  private onResizeHandler\n\n  constructor (\n    options: BartenderOptions = {},\n    barOptions: BartenderBarOptions = {}\n  ) {\n    this.debug = options.debug ?? this.debug\n    this.switchTimeout = options.switchTimeout ?? this.switchTimeout\n    this.focusTrap = options.focusTrap ?? this.focusTrap\n    this.barDefaultOptions = {\n      ...this.barDefaultOptions,\n      ...barOptions,\n      focusTrap: this.focusTrap,\n    }\n\n    // Get main element\n    const el = resolveElement(options.el || '.bartender')\n    if (!el) throw new BartenderError('Main element is required')\n    this.el = el\n    this.el.classList.add('bartender')\n\n    // Get content element\n    const contentEl = resolveElement(options.contentEl || '.bartender__content')\n    if (!contentEl) throw new BartenderError('Content element is required')\n    if (contentEl.parentElement !== this.el) throw new BartenderError('Content element must be a direct child of the main element')\n    this.contentEl = contentEl\n    this.contentEl.classList.add('bartender__content')\n    this.contentEl.setAttribute('tabindex', '-1')\n\n    // Register content element as pushable element\n    this.addPushElement({\n      el: this.contentEl,\n      modes: [\n        'push',\n        'reveal',\n      ],\n    })\n\n    // Create focus trap\n    if (this.focusTrap === true) {\n      const containerNodes: HTMLElement[] = [\n        this.contentEl,\n      ]\n\n      const fixedContainer = this.el.querySelector('.bartender__fixed')\n      if (fixedContainer) containerNodes.push(fixedContainer as HTMLElement)\n\n      // TODO: support adding extra elements here\n      this.trap = focusTrap.createFocusTrap(containerNodes, {\n        initialFocus: this.contentEl,\n        fallbackFocus: () => {\n          return this.contentEl\n        },\n        escapeDeactivates: false,\n        clickOutsideDeactivates: false,\n        allowOutsideClick: false,\n        returnFocusOnDeactivate: false,\n        preventScroll: true,\n      })\n      this.trap.activate()\n    }\n\n    // Initialize queue\n    this.queue = new Queue(1)\n\n    // Debouncer for resizing\n    this.resizeDebounce = debounce(() => {\n      this.pushElements(this.getOpenBar())\n    }, 100)\n\n    // Add event listeners\n    this.onBarUpdateHandler = this.onBarUpdate.bind(this)\n    window.addEventListener('bartender-bar-update', this.onBarUpdateHandler)\n\n    this.onKeydownHandler = this.onKeydown.bind(this)\n    window.addEventListener('keydown', this.onKeydownHandler)\n\n    this.onResizeHandler = this.onResize.bind(this)\n    window.addEventListener('resize', this.onResizeHandler)\n\n    this.el.classList.add('bartender--ready')\n    this.el.dispatchEvent(new CustomEvent('bartender-init', {\n      bubbles: true,\n      detail: { bartender: this },\n    }))\n  }\n\n  public async destroy (removeBarElements = false): Promise<this> {\n    // Get all bar names\n    const barNames = this.bars.reduce((acc: string[], bar) => {\n      acc.push(bar.name)\n      return acc\n    }, [])\n\n    // Remove bars\n    for (const name of barNames) {\n      if (!this.getBar(name)) continue\n\n      await this.removeBar(name, removeBarElements)\n    }\n\n    // Remove classes\n    this.el.classList.remove('bartender', 'bartender--ready')\n    this.contentEl.classList.remove('bartender__content')\n\n    // Destroy focus trap\n    if (this.trap) this.trap.deactivate()\n\n    // Remove event listeners\n    window.removeEventListener('bartender-bar-update', this.onBarUpdateHandler)\n    window.removeEventListener('keydown', this.onKeydownHandler)\n    window.removeEventListener('resize', this.onResizeHandler)\n\n    this.el.dispatchEvent(new CustomEvent('bartender-destroyed', {\n      bubbles: true,\n      detail: { bartender: this },\n    }))\n\n    return Promise.resolve(this)\n  }\n\n  public getBar (name: string): Bar | null {\n    return this.bars.find(item => item.name === name) || null\n  }\n\n  private getOpenBar (): Bar | null {\n    return this.bars.find(item => item.isOpen() === true) || null\n  }\n\n  public addBar (name: string, userOptions: BartenderBarOptions = {}): Bar {\n    if (!name || typeof name !== 'string') throw new BartenderError('Bar name is required')\n    if (this.getBar(name)) throw new BartenderError(`Bar with name '${name}' is already defined`)\n\n    // Create a new bar\n    const bar = new Bar(name, {\n      ...this.barDefaultOptions,\n      ...userOptions,\n    })\n\n    // Check that bar element is a direct child on main element\n    if (bar.el.parentElement !== this.el) throw new BartenderError(`Element of bar '${bar.name}' must be a direct child of the Bartender main element`)\n\n    // Insert overlay element\n    this.contentEl?.appendChild(bar.overlayObj.el)\n    bar.overlayObj.el.addEventListener('click', () => {\n      if (bar.permanent === true) return\n\n      this.close()\n    })\n\n    this.bars.push(bar)\n\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-added', {\n      bubbles: true,\n      detail: { bar },\n    }))\n\n    return bar\n  }\n\n  public async removeBar (name: string, removeElement = false): Promise<this> {\n    if (!name || typeof name !== 'string') throw new BartenderError('Bar name is required')\n\n    const bar = this.getBar(name)\n    if (!bar) throw new BartenderError(`Bar with name '${name}' was not found`)\n\n    if (this.getOpenBar() === bar) await this.close()\n\n    bar.destroy(removeElement)\n\n    const barIndex = this.bars.findIndex(item => item.name === name)\n    this.bars.splice(barIndex, 1)\n\n    this.el.dispatchEvent(new CustomEvent('bartender-bar-removed', {\n      bubbles: true,\n      detail: { name },\n    }))\n\n    return Promise.resolve(this)\n  }\n\n  private async openBar (name: string): Promise<Bar | BartenderError> {\n    const bar = this.getBar(name)\n    if (!bar) return Promise.reject(new BartenderError(`Unknown bar '${name}'`))\n    if (bar.isOpen() === true) return Promise.resolve(bar)\n\n    // Close any open bar\n    const openBar = this.getOpenBar()\n\n    if (openBar) {\n      await this.closeBar(openBar.name, true)\n      await sleep(this.switchTimeout)\n    }\n\n    if (this.trap) this.trap.pause()\n    this.el.classList.add('bartender--open')\n    this.contentEl.setAttribute('aria-hidden', 'true')\n    this.pushElements(bar)\n\n    return bar.open()\n  }\n\n  public async open (name: string, button?: HTMLElement | null): Promise<Bar | Error> {\n    const id = Symbol()\n    await this.queue.wait(id)\n\n    // Store reference to the button which was used to open the bar.\n    this.previousOpenButton = button\n\n    return this.openBar(name).finally(() => {\n      this.queue.end(id)\n    })\n  }\n\n  private async closeBar (name?: string, switching = false): Promise<Bar | null> {\n    const bar = name ? this.getBar(name) : this.getOpenBar()\n    if (!bar || !bar.isOpen()) return Promise.resolve(null)\n\n    this.pullElements(bar)\n    await bar.close()\n\n    // If we going to open right after closing the current one,\n    // don't update elements yet.\n    if (switching === false) {\n      this.el.classList.remove('bartender--open')\n      this.contentEl.setAttribute('aria-hidden', 'false')\n    }\n\n    return Promise.resolve(bar)\n  }\n\n  public async close (name?: string): Promise<Bar | null> {\n    const id = Symbol()\n    await this.queue.wait(id)\n\n    if (this.trap) this.trap.unpause()\n\n    return this.closeBar(name).finally(() => {\n      this.queue.end(id)\n\n      // Focus to the previous open button\n      if (this.previousOpenButton) {\n        this.previousOpenButton.focus()\n        this.previousOpenButton = null\n      } else {\n        this.contentEl.focus()\n      }\n    })\n  }\n\n  public async toggle (name: string, button?: HTMLElement | null): Promise<Bar | BartenderError | null> {\n    const bar = this.getBar(name)\n    if (!bar) return Promise.reject(new BartenderError(`Unknown bar '${name}'`))\n\n    return (bar.isOpen() === true) ? this.close() : this.open(name, button)\n  }\n\n  public addPushElement (options: BartenderPushElementOptions = {}): PushElement {\n    const pushElement = new PushElement(options)\n    this.pushableElements.push(pushElement)\n\n    return pushElement\n  }\n\n  private pushElements (bar: Bar | null): PushElement[] {\n    if (!bar || !this.pushableElements.length) return this.pushableElements\n\n    const pushStyles = bar.getPushStyles()\n\n    for (const item of this.pushableElements) {\n      item.push(bar, pushStyles)\n    }\n\n    return this.pushableElements\n  }\n\n  private pullElements (bar: Bar | null): PushElement[] {\n    if (!bar || !this.pushableElements.length) return this.pushableElements\n\n    const pushStyles = bar.getPushStyles()\n\n    for (const item of this.pushableElements) {\n      item.pull(pushStyles)\n    }\n\n    return this.pushableElements\n  }\n\n  private onBarUpdate (): void {\n    this.pushElements(this.getOpenBar())\n  }\n\n  private onKeydown (event: KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      const openBar = this.getOpenBar()\n      if (!openBar || openBar.permanent === true) return\n\n      this.close()\n    }\n  }\n\n  private onResize (): void {\n    this.resizeDebounce()\n  }\n}\n"],"names":["resolveElement","query","sleep","duration","resolve","BartenderError","message","Overlay","name","enabled","__publicField","error","val","Bar","options","el","_a","_b","_c","_d","_e","_f","focusTrap","removeElement","position","validPositions","mode","validModes","__async","PushElement","bar","pushStyles","Bartender","barOptions","__spreadProps","__spreadValues","contentEl","containerNodes","fixedContainer","Queue","debounce","removeBarElements","barNames","acc","item","userOptions","barIndex","openBar","button","id","switching","pushElement","event"],"mappings":"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"}