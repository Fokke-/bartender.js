{"version":3,"file":"Bartender.js","sources":["../src/lib/utils.ts","../src/lib/BartenderError.ts","../src/lib/Bar.ts","../src/lib/PushElement.ts","../src/lib/Bartender.ts"],"sourcesContent":["import type { BartenderElementQuery } from './types'\n\n/**\n * Resolve HTML element\n *\n * @param {string|Element|null} query - Selector string or element\n * @param {object} parent - Parent element\n * @param {boolean} directChild - Match only to the direct child\n * @returns {HTMLElement|HTMLDialogElement|null}\n */\nexport const resolveElement = (\n  query: BartenderElementQuery,\n  parent: Document | HTMLElement = document,\n  directChild = false\n): HTMLElement | HTMLDialogElement | null => {\n  if (!query) return null\n  if (query instanceof Element) return query as HTMLElement\n  if (typeof query === 'string') {\n    if (directChild) {\n      return parent.querySelector(`:scope > ${query}`) as HTMLElement\n    }\n\n    return parent.querySelector(query) as HTMLElement\n  }\n\n  return null\n}\n\n/**\n * Sleep for given number of milliseconds\n *\n * @param {number} duration - Duration in milliseconds\n * @returns {Promise<void>}\n */\nexport const sleep = (duration = 100): Promise<void> => {\n  return new Promise(resolve => {\n    if (!duration) return resolve()\n\n    return setTimeout(resolve, duration)\n  })\n}\n\n/**\n * Set dvh unit\n *\n * @returns {void}\n */\nexport const setDvh = (): number | null => {\n  if (typeof window === 'undefined') return null\n\n  document.documentElement.style.setProperty('--dvh', `${window.innerHeight * 0.01}px`)\n\n  return window.innerHeight * 0.01\n}\n","/**\n * Bartender error\n */\nexport class BartenderError extends Error {\n\n  /**\n   * @param {string} message - Error message\n   */\n  constructor(message: string) {\n    super(message)\n    this.name = 'Bartender error'\n  }\n\n}\n","import type {\n  BartenderBarOptions,\n  BartenderBarPosition,\n  BartenderPushStyles,\n  BartenderTransitionProperties,\n} from './types'\nimport { BartenderError } from './BartenderError'\nimport { resolveElement, sleep } from './utils'\n\n/**\n * Bartender bar\n */\nexport class Bar {\n  /** @property {boolean} debug - Enable debug mode? */\n  public debug = false\n\n  /** @property {boolean} initialized - Is bar initialized? */\n  private initialized = false\n\n  /** @property {string} _name - Bar name */\n  private _name = ''\n\n  /** @property {HTMLDialogElement} el - Bar element */\n  public readonly el: HTMLDialogElement\n\n  /** @property {string} _position - Bar position */\n  private _position: BartenderBarPosition = 'left'\n\n  /** @property {boolean} _overlay - Enable overlay? */\n  private _overlay = true\n\n  /** @property {boolean} _permanent - Enable permanent mode? */\n  private _permanent = false\n\n  /** @property {boolean} _scrollTop - Scroll to the top when bar is opened? */\n  private _scrollTop = true\n\n  /** @property {boolean} isOpened - Is the bar currently open? */\n  private isOpened = false\n\n  /** @property {Function} onCloseHandler - Handler for dialog close event */\n  private onCloseHandler\n\n  /** @property {Function} onClickHandler - Handler for dialog click event */\n  private onClickHandler\n\n  /**\n   * Create a new bar\n   *\n   * @param {string} name - Unique name of the bar\n   * @param {object} options - Bar options\n   * @throws {BartenderError}\n   */\n  constructor(name: string, options: BartenderBarOptions = {}) {\n    if (!name) throw new BartenderError('Bar name is required')\n    this.name = name\n\n    // Get element\n    const el = resolveElement(options.el || null) as HTMLDialogElement\n    if (!el)\n      throw new BartenderError(\n        `Content element for bar '${this.name}' is required`,\n      )\n\n    // Check that element is a dialog\n    if (el.tagName !== 'DIALOG')\n      throw new BartenderError(\n        `Bar element for '${this.name}' must be a <dialog> element`,\n      )\n\n    this.el = el\n    this.el.classList.add('bartender-bar', 'bartender-bar--closed')\n\n    this.position = options.position ?? this._position\n    this.overlay = options.overlay ?? this._overlay\n    this.permanent = options.permanent ?? this._permanent\n    this.scrollTop = options.scrollTop ?? this._scrollTop\n\n    // Event listeners\n    this.onCloseHandler = this.onClose.bind(this)\n    this.el.addEventListener('close', this.onCloseHandler)\n\n    this.onClickHandler = this.onClick.bind(this)\n    this.el.addEventListener('click', this.onClickHandler)\n\n    this.initialized = true\n  }\n\n  /**\n   * Destroy bar instance\n   *\n   * @returns {this}\n   */\n  public destroy(): this {\n    this.el.classList.remove('bartender-bar', `bartender-bar--${this.position}`)\n\n    this.el.removeEventListener('close', this.onCloseHandler)\n    this.el.removeEventListener('click', this.onClickHandler)\n\n    return this\n  }\n\n  /** @type {string} */\n  public get name() {\n    return this._name\n  }\n\n  /** @type {string} */\n  public set name(val: string) {\n    this._name = val\n\n    if (this.initialized === false) return\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'name',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) console.debug('Updated bar name', this)\n  }\n\n  /** @type {string} */\n  public get position() {\n    return this._position\n  }\n\n  /**\n   * @type {string}\n   * @throws {BartenderError}\n   */\n  public set position(val: BartenderBarPosition) {\n    // Validate position\n    if (!val)\n      throw new BartenderError(`Position is required for bar '${this.name}'`)\n\n    const validPositions: BartenderBarPosition[] = [\n      'left',\n      'right',\n      'top',\n      'bottom',\n    ]\n\n    if (!validPositions.includes(val))\n      throw new BartenderError(\n        `Invalid position '${val}' for bar '${this.name}'. Use one of the following: ${validPositions.join(', ')}.`,\n      )\n\n    // Update element classes\n    this.el.classList.remove(`bartender-bar--${this._position}`)\n    this.el.classList.add(`bartender-bar--${val}`)\n\n    // Set new position\n    this._position = val\n\n    if (this.initialized === false) return\n\n    // If position was changed after bar was created,\n    // dispatch event to update pushable elements\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'position',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) console.debug('Updated bar position', this)\n  }\n\n  /** @type {boolean} */\n  public get overlay() {\n    return this._overlay\n  }\n\n  /** @type {boolean} */\n  public set overlay(val: boolean) {\n    this._overlay = val\n\n    if (val === true) {\n      this.el.classList.add('bartender-bar--overlay')\n    } else {\n      this.el.classList.remove('bartender-bar--overlay')\n    }\n\n    if (this.initialized === false) return\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'overlay',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) console.debug('Updated bar overlay', this)\n  }\n\n  /** @type {boolean} */\n  public get permanent() {\n    return this._permanent\n  }\n\n  /** @type {boolean} */\n  public set permanent(val: boolean) {\n    this._permanent = val\n\n    if (this.initialized === false) return\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'permanent',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) console.debug('Updated bar permanence', this)\n  }\n\n  /** @type {boolean} */\n  public get scrollTop() {\n    return this._scrollTop\n  }\n\n  /** @type {boolean} */\n  public set scrollTop(val: boolean) {\n    this._scrollTop = val\n\n    if (this.initialized === false) return\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'scrollTop',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) console.debug('Updated bar scrollTop', this)\n  }\n\n  /**\n   * Is bar currently open?\n   *\n   * @returns {boolean}\n   */\n  public isOpen(): boolean {\n    return this.isOpened\n  }\n\n  /**\n   * Get transition properties for an element\n   *\n   * @param {Element} el - Element to get properties for\n   * @returns {BartenderTransitionProperties}\n   */\n  public getTransitionProperties(el: Element): BartenderTransitionProperties {\n    const properties: BartenderTransitionProperties = {\n      timingFunction: undefined,\n      duration: 0,\n    }\n\n    if (!el) return properties\n\n    const transitionProperties =\n      window.getComputedStyle(el).getPropertyValue('transition-property') || ''\n    const transitionDurations =\n      window.getComputedStyle(el).getPropertyValue('transition-duration') || ''\n    const transitionTimingFunctions =\n      window\n        .getComputedStyle(el)\n        .getPropertyValue('transition-timing-function') || ''\n\n    // Find out index for transform\n    const transformIndex = transitionProperties\n      .split(',')\n      .map((item) => item.trim())\n      .indexOf('transform')\n    if (transformIndex < 0) return properties\n\n    // Get duration of transform\n    const duration = transitionDurations.split(',').map((item) => item.trim())[\n      transformIndex\n    ]\n    if (duration) {\n      properties.duration = parseFloat(duration) * 1000\n    }\n\n    // Get timing function of transform\n    const timingFunction = transitionTimingFunctions\n      .split(',')\n      .map((item) => item.trim())[transformIndex]\n    if (timingFunction) {\n      properties.timingFunction = timingFunction\n    }\n\n    return properties\n  }\n\n  /**\n   * Open bar\n   *\n   * @returns {Promise<this>}\n   */\n  public async open(): Promise<this> {\n    if (this.debug) console.debug('Opening bar', this)\n\n    // Dispatch 'before open' event\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-before-open', {\n        bubbles: true,\n        detail: { bar: this },\n      }),\n    )\n\n    this.el.showModal()\n    if (this.scrollTop === true) this.el.scrollTo(0, 0)\n    this.el.classList.remove('bartender-bar--closed')\n    this.el.classList.add('bartender-bar--open')\n    this.isOpened = true\n\n    const { duration } = this.getTransitionProperties(this.el)\n    await sleep(duration)\n\n    // Dispatch 'after open' event\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-after-open', {\n        bubbles: true,\n        detail: { bar: this },\n      }),\n    )\n\n    if (this.debug) console.debug('Finished opening bar', this)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Close bar\n   *\n   * @returns {Promise<this>}\n   */\n  public async close(): Promise<this> {\n    this.el.close()\n\n    const { duration } = this.getTransitionProperties(this.el)\n    await sleep(duration)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Handler for dialog close event\n   *\n   * @returns {Promise<this>}\n   */\n  private async onClose(): Promise<this> {\n    if (this.debug) console.debug('Closing bar', this)\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-before-close', {\n        bubbles: true,\n        detail: { bar: this },\n      }),\n    )\n\n    this.el.classList.remove('bartender-bar--open')\n    this.isOpened = false\n\n    const { duration } = this.getTransitionProperties(this.el)\n    await sleep(duration)\n\n    this.el.classList.add('bartender-bar--closed')\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-after-close', {\n        bubbles: true,\n        detail: { bar: this },\n      }),\n    )\n\n    if (this.debug) console.debug('Finished closing bar', this)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Handler for dialog click event\n   *\n   * @param {MouseEvent} event - Click event\n   * @returns {Promise<this>}\n   */\n  private onClick(event: MouseEvent): Promise<this> {\n    const rect = this.el.getBoundingClientRect()\n\n    // Detect clicking on backdrop\n    if (\n      this.permanent === false &&\n      (rect.left > event.clientX ||\n        rect.right < event.clientX ||\n        rect.top > event.clientY ||\n        rect.bottom < event.clientY)\n    ) {\n      this.close()\n    }\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Get styles for pushable elements\n   *\n   * @returns {Promise<BartenderPushStyles>}\n   */\n  public async getPushStyles(): Promise<BartenderPushStyles> {\n    const styles: BartenderPushStyles = {\n      transform: '',\n      transitionDuration: '',\n      transitionTimingFunction: '',\n    }\n\n    if (!this.position || !this.el) {\n      return styles\n    }\n\n    await new Promise((resolve) => requestAnimationFrame(resolve))\n\n    const { duration, timingFunction } = this.getTransitionProperties(this.el)\n\n    styles.transform =\n      {\n        left: `translateX(${this.el.offsetWidth}px)`,\n        right: `translateX(-${this.el.offsetWidth}px)`,\n        top: `translateY(${this.el.offsetHeight}px)`,\n        bottom: `translateY(-${this.el.offsetHeight}px)`,\n      }[this.position] || ''\n    styles.transitionDuration = `${duration}ms`\n    styles.transitionTimingFunction = timingFunction || ''\n\n    return Promise.resolve(styles)\n  }\n}\n","import type {\n  BartenderElementQuery,\n  BartenderPushElementOptions,\n  BartenderPushStyles,\n  BartenderBarPosition,\n} from './types'\nimport { BartenderError } from './BartenderError'\nimport { Bar } from './Bar'\nimport { resolveElement } from './utils'\n\n/**\n * Bartender pushable element\n */\nexport class PushElement {\n  /** @property {HTMLElement} el - Element to push */\n  public readonly el: HTMLElement\n\n  /** @property {Bar[]} bars - Matched bars */\n  private readonly bars: Bar[]\n\n  /** @property {string[]} positions - Matched positions */\n  private readonly positions: BartenderBarPosition[]\n\n  /** @property {boolean} isPushed - Is the element currently pushed? */\n  private isPushed = false\n\n  /**\n   * Create a new pushable element\n   *\n   * @param {BartenderElementQuery} el - Pushable element\n   * @param {object} options - Options for pushable element\n   * @throws {BartenderError}\n   */\n  constructor(\n    el: BartenderElementQuery,\n    options: BartenderPushElementOptions = {},\n  ) {\n    // Get element\n    const element = resolveElement(el || null)\n    if (!element)\n      throw new BartenderError('Element is required for push element')\n\n    this.el = element\n    this.bars = options.bars || []\n    this.positions = options.positions || []\n  }\n\n  /**\n   * Push element\n   *\n   * @param {Bar} bar - The bar to match against push element properties\n   * @param {object} pushStyles - Push styles from the bar\n   * @returns {this}\n   */\n  public push(bar: Bar, pushStyles: BartenderPushStyles): this {\n    // If this element is not supposed to be pushed,\n    // clear transition styles\n    if (\n      (this.bars.length && !this.bars.includes(bar)) ||\n      (this.positions.length && !this.positions.includes(bar.position))\n    ) {\n      this.el.style.transform = ''\n      this.el.style.transitionTimingFunction = ''\n      this.el.style.transitionDuration = ''\n      this.isPushed = false\n\n      return this\n    }\n\n    this.el.style.transform = pushStyles.transform\n    this.el.style.transitionTimingFunction = pushStyles.transitionTimingFunction\n    this.el.style.transitionDuration = pushStyles.transitionDuration\n    this.isPushed = true\n\n    return this\n  }\n\n  /**\n   * Pull element and return it to the original position\n   *\n   * @param {object} pushStyles - Push styles from the bar\n   * @returns {this}\n   */\n  public pull(pushStyles: BartenderPushStyles): this {\n    if (this.isPushed === false) return this\n\n    this.el.style.transform = 'translateX(0) translateY(0)'\n    this.el.style.transitionTimingFunction = pushStyles.transitionTimingFunction\n    this.el.style.transitionDuration = pushStyles.transitionDuration\n    this.isPushed = false\n\n    return this\n  }\n}\n","import type {\n  BartenderOptions,\n  BartenderBarDefaultOptions,\n  BartenderBarOptions,\n  BartenderElementQuery,\n  BartenderPushElementOptions,\n} from './types'\nimport { Queue } from 'async-await-queue'\nimport { debounce } from 'ts-debounce'\nimport { sleep, setDvh } from './utils'\nimport { BartenderError } from './BartenderError'\nimport { Bar } from './Bar'\nimport { PushElement } from './PushElement'\n\n/**\n * Class for creating accessible off-canvas bars.\n */\nexport class Bartender {\n  /** @property {boolean} debug - Enable debug mode? */\n  private _debug = false\n\n  /** @property {number} switchTimeout - Time to wait in milliseconds until another bar is opened */\n  public switchTimeout = 150\n\n  /** @property {Bar[]} bars - Bars added to the instance */\n  public readonly bars: Bar[] = []\n\n  /** @property {object} barDefaultOptions - Default options for the bars */\n  private readonly barDefaultOptions: BartenderBarOptions = {\n    el: null,\n    position: 'left',\n    overlay: true,\n    permanent: false,\n    scrollTop: true,\n  }\n\n  /** @property {boolean} Switching - Will another bar open immediately after the current bar is closed? */\n  private switching = false\n\n  /** @property {PushElement[]} pushableElements - Pushable elements added to the instance */\n  private pushableElements: PushElement[] = []\n\n  /** @property {object} queue - Queue for actions */\n  private queue: Queue\n\n  /** @property {Function} resizeDebounce - Debouncer for resizing */\n  private resizeDebounce\n\n  /** @property {Function} resizeDebounce - Debouncer for resizing */\n  private onBarUpdateHandler\n\n  /** @property {Function} onKeydownHandler - Handler for keydown event */\n  private onKeydownHandler\n\n  /** @property {Function} onKeydownHandler - Handler for resize event */\n  private onResizeHandler\n\n  /**\n   * Create a new Bartender instance\n   *\n   * @param {object} options - Instance options\n   * @param {object} barOptions - Default options for bars\n   * @throws {BartenderError}\n   */\n  constructor(\n    options: BartenderOptions = {},\n    barOptions: BartenderBarDefaultOptions = {},\n  ) {\n    // Polyfill DVH units\n    // setDvh()\n    // document.addEventListener('DOMContentLoaded', () => {\n    //   setDvh()\n    // })\n\n    this.debug = options.debug ?? this._debug\n    this.switchTimeout = options.switchTimeout ?? this.switchTimeout\n    this.barDefaultOptions = {\n      ...this.barDefaultOptions,\n      ...barOptions,\n    }\n\n    // Queue for actions\n    this.queue = new Queue(1)\n\n    // Debouncer for resizing\n    this.resizeDebounce = debounce(() => {\n      setDvh()\n      this.pushElements(this.getOpenBar())\n    }, 100)\n\n    // Event listeners\n    this.onBarUpdateHandler = this.onBarUpdate.bind(this)\n    window.addEventListener('bartender-bar-updated', this.onBarUpdateHandler)\n\n    this.onKeydownHandler = this.onKeydown.bind(this)\n    document.addEventListener('keydown', this.onKeydownHandler)\n\n    this.onResizeHandler = this.onResize.bind(this)\n    window.addEventListener('resize', this.onResizeHandler)\n\n    document.body.classList.add('bartender-ready')\n    window.dispatchEvent(\n      new CustomEvent('bartender-init', {\n        bubbles: true,\n        detail: { bartender: this },\n      }),\n    )\n\n    if (this.debug) console.debug('Bartender initialized', this)\n  }\n\n  /** @type {boolean} */\n  public get debug() {\n    return this._debug\n  }\n\n  /** @type {boolean} */\n  public set debug(val: boolean) {\n    this._debug = val\n\n    for (const bar of this.bars) {\n      bar.debug = val\n    }\n  }\n\n  /**\n   * Destroy Bartender instance\n   *\n   * @returns {Promise<this>}\n   */\n  public async destroy(): Promise<this> {\n    await this.close()\n\n    // Get all bar names\n    const barNames = this.bars.reduce((acc: string[], bar) => {\n      acc.push(bar.name)\n      return acc\n    }, [])\n\n    // Remove bars\n    for (const name of barNames) {\n      if (!this.getBar(name)) continue\n\n      await this.removeBar(name)\n    }\n\n    // Remove classes\n    document.body.classList.remove('bartender', 'bartender-ready')\n\n    // Remove event listeners\n    window.removeEventListener('bartender-bar-updated', this.onBarUpdateHandler)\n    document.removeEventListener('keydown', this.onKeydownHandler)\n    window.removeEventListener('resize', this.onResizeHandler)\n\n    window.dispatchEvent(\n      new CustomEvent('bartender-destroyed', {\n        bubbles: true,\n        detail: { bartender: this },\n      }),\n    )\n\n    if (this.debug) console.debug('Bartender destroyed', this)\n\n    return Promise.resolve(this)\n  }\n\n  /**\n   * Get bar by name\n   *\n   * @param {string} name - Bar name\n   * @returns {object|null}\n   */\n  public getBar(name: string): Bar | null {\n    return this.bars.find((item) => item.name === name) || null\n  }\n\n  /**\n   * Get currently open bar\n   *\n   * @returns {object|null}\n   */\n  private getOpenBar(): Bar | null {\n    return this.bars.find((item) => item.isOpen() === true) || null\n  }\n\n  /**\n   * Add a new bar\n   *\n   * @param {string} name - Unique name for the bar\n   * @param {object} options - Bar options\n   * @throws {BartenderError}\n   * @returns {object} Bar object\n   */\n  public addBar(name: string, options: BartenderBarOptions = {}): Bar {\n    if (!name || typeof name !== 'string') {\n      throw new BartenderError('Bar name is required')\n    }\n\n    if (this.getBar(name)) {\n      throw new BartenderError(`Bar with name '${name}' is already defined`)\n    }\n\n    // Create a new bar\n    const bar = new Bar(name, {\n      ...this.barDefaultOptions,\n      ...options,\n    })\n\n    // Set debug mode\n    bar.debug = this.debug\n\n    // Check that element is not assigned to another bar\n    if (this.bars.some((item) => item.el === bar.el)) {\n      throw new BartenderError(\n        `Element of bar '${bar.name}' is already being used for another bar`,\n      )\n    }\n\n    // Handlers for close events\n    bar.el.addEventListener('bartender-bar-before-close', () => {\n      this.pullElements(bar)\n    })\n\n    bar.el.addEventListener('bartender-bar-after-close', () => {\n      if (this.switching === true) {\n        this.switching = false\n      } else {\n        document.body.classList.remove('bartender-open')\n      }\n    })\n\n    this.bars.push(bar)\n\n    window.dispatchEvent(\n      new CustomEvent('bartender-bar-added', {\n        bubbles: true,\n        detail: { bar },\n      }),\n    )\n\n    if (this.debug) console.debug('Added a new bar', bar)\n\n    return bar\n  }\n\n  /**\n   * Remove bar\n   *\n   * @param {string} name - Bar name\n   * @throws {BartenderError}\n   * @returns {this}\n   */\n  public removeBar(name: string): this {\n    if (!name || typeof name !== 'string')\n      throw new BartenderError('Bar name is required')\n\n    const bar = this.getBar(name)\n    if (!bar) throw new BartenderError(`Bar with name '${name}' was not found`)\n    if (this.getOpenBar() === bar) this.close()\n\n    bar.destroy()\n\n    const barIndex = this.bars.findIndex((item) => item.name === name)\n    this.bars.splice(barIndex, 1)\n\n    window.dispatchEvent(\n      new CustomEvent('bartender-bar-removed', {\n        bubbles: true,\n        detail: { name },\n      }),\n    )\n\n    if (this.debug) console.debug(`Removed bar '${name}'`)\n\n    return this\n  }\n\n  /**\n   * Open bar\n   *\n   * @param {string} name - Bar name\n   * @throws {BartenderError}\n   * @returns {Promise<Bar>}\n   */\n  public async open(name: string): Promise<Bar> {\n    const bar = this.getBar(name)\n    if (!bar) throw new BartenderError(`Unknown bar '${name}'`)\n    if (bar.isOpen() === true) return Promise.resolve(bar)\n\n    const id = Symbol()\n    await this.queue.wait(id)\n\n    // Close any open bar\n    const openBar = this.getOpenBar()\n\n    if (openBar) {\n      await this.close(openBar.name, true)\n      await sleep(this.switchTimeout)\n    }\n\n    document.body.classList.add('bartender-open')\n    this.pushElements(bar)\n\n    await bar.open().finally(() => {\n      this.queue.end(id)\n    })\n\n    return bar\n  }\n\n  /**\n   * Close bar\n   *\n   * @param {string|undefined} name - Bar name. Leave empty to close any open bar.\n   * @param {boolean} _switching - For internal use only. Will another bar open immediately after closing?\n   * @returns {Promise<Bar|null>}\n   */\n  public async close(name?: string, _switching = false): Promise<Bar | null> {\n    const bar = name ? this.getBar(name) : this.getOpenBar()\n    if (!bar || !bar.isOpen()) return Promise.resolve(null)\n\n    // Store switching state. The event handler will use it to determine whether to remove the 'bartender--open' class.\n    this.switching = _switching\n\n    await bar.close()\n\n    return Promise.resolve(bar)\n  }\n\n  /**\n   * Toggle bar\n   *\n   * @param {string} name - Bar name\n   * @throws {BartenderError}\n   * @returns {Promise<Bar|null>}\n   */\n  public async toggle(name: string): Promise<Bar | null> {\n    const bar = this.getBar(name)\n    if (!bar) throw new BartenderError(`Unknown bar '${name}'`)\n\n    return bar.isOpen() === true ? await this.close() : await this.open(name)\n  }\n\n  /**\n   * Add a new pushable element\n   *\n   * @param {BartenderElementQuery} el - Pushable element\n   * @param {object} options - Options for pushable element\n   * @returns {PushElement}\n   */\n  public addPushElement(\n    el: BartenderElementQuery,\n    options: BartenderPushElementOptions = {},\n  ): PushElement {\n    if (this.pushableElements.some((item) => item.el === el))\n      throw new BartenderError(\n        'This element is already defined as pushable element.',\n      )\n\n    const pushElement = new PushElement(el, options)\n    this.pushableElements.push(pushElement)\n\n    if (this.debug) console.debug('Added a new pushable element', pushElement)\n\n    return pushElement\n  }\n\n  /**\n   * Remove pushable element\n   *\n   * @param {Element} el - Element to remove\n   * @throws {BartenderError}\n   * @returns {PushElement[]}\n   */\n  public removePushElement(el: Element): PushElement[] {\n    const index = this.pushableElements.findIndex((item) => item.el === el)\n    if (index === -1) throw new BartenderError('Pushable element was not found')\n\n    if (this.debug)\n      console.debug('Removed pushable element', this.pushableElements[index])\n    this.pushableElements.splice(index, 1)\n\n    return this.pushableElements\n  }\n\n  /**\n   * Push elements\n   *\n   * @param {Bar|null} bar - The bar from which the styles are fetched\n   * @returns {PushElement[]}\n   */\n  private async pushElements(bar: Bar | null): Promise<PushElement[]> {\n    if (!bar || !this.pushableElements.length) return this.pushableElements\n\n    const pushStyles = await bar.getPushStyles()\n\n    for (const item of this.pushableElements) {\n      item.push(bar, pushStyles)\n    }\n\n    return Promise.resolve(this.pushableElements)\n  }\n\n  /**\n   * Pull elements and return them to the original position\n   *\n   * @param {Bar|null} bar - The bar from which the styles are fetched\n   * @returns {PushElement[]}\n   */\n  private async pullElements(bar: Bar | null): Promise<PushElement[]> {\n    if (!bar || !this.pushableElements.length) return this.pushableElements\n\n    const pushStyles = await bar.getPushStyles()\n\n    for (const item of this.pushableElements) {\n      item.pull(pushStyles)\n    }\n\n    return Promise.resolve(this.pushableElements)\n  }\n\n  /**\n   * Handler for bartender-bar-updated event\n   *\n   * @returns {void}\n   */\n  private onBarUpdate(): void {\n    this.pushElements(this.getOpenBar())\n  }\n\n  /**\n   * Handler for keydown event\n   *\n   * @param {KeyboardEvent} event - Keyboard event\n   * @returns {void}\n   */\n  private onKeydown(event: KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      const openBar = this.getOpenBar()\n      if (openBar && openBar.permanent === true) {\n        event.preventDefault()\n        return\n      }\n    }\n  }\n\n  /**\n   * Handler for resize event\n   *\n   * @returns {void}\n   */\n  private onResize(): void {\n    this.resizeDebounce()\n  }\n}\n"],"names":["resolveElement","query","parent","directChild","sleep","duration","resolve","setDvh","BartenderError","message","Bar","name","options","el","val","validPositions","properties","transitionProperties","transitionDurations","transitionTimingFunctions","transformIndex","item","timingFunction","event","rect","styles","PushElement","element","bar","pushStyles","Bartender","barOptions","Queue","debounce","barNames","acc","barIndex","id","openBar","_switching","pushElement","index"],"mappings":"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"}