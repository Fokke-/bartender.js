{"version":3,"names":[],"mappings":"","sources":["bartender.module.js"],"sourcesContent":["'use strict'\n\n/**\n * Class for creating accessible off-canvas bars.\n */\nclass Bartender {\n\n  /**\n   * @param {object} options - User defined options\n   */\n  constructor (options) {\n    // Apply user configuration\n    this.options = Object.assign({\n      // Debug mode\n      debug: false,\n\n      // Show shading overlay over content wrapper when bar is open?\n      overlay: true,\n\n      // Close open bar with escape key?\n      closeOnEsc: true,\n\n      // Selector to find main wrapper\n      mainWrapSelector: '.bartender-main',\n\n      // Selector to find content wrapper\n      contentWrapSelector: '.bartender-content',\n\n      // Classes\n      readyClass: 'bartender-ready',\n      openClass: 'bartender-open',\n    }, options)\n\n    // Overlay element\n    this.overlay = null\n\n    // Currently open bar\n    this.currentOpenBar = null\n\n    // Button which was previously used to open the bar\n    this.previousOpenButton = null\n\n    // Window resize timeout\n    this.resizeTimeout = null\n\n    // Object for storing the bars\n    this.bars = {}\n\n    // Arrays for storing buttons\n    this.openButtons = []\n    this.closeButtons = []\n    this.toggleButtons = []\n\n    // Array for storing pushable elements\n    // These elements will be moved when bar with \"push\" or \"reveal\" mode is being opened.\n    this.pushElements = []\n\n    // Valid bar positions\n    this.validBarPositions = [\n      'left',\n      'right',\n      'top',\n      'bottom',\n    ]\n\n    // Run initializer\n    this.init()\n  }\n\n  /**\n   * Log to console\n   *\n   * @param {string} text - Text to log\n   * @returns {void}\n   */\n  log (text = '') {\n    console.log('Bartender: ' + text)\n  }\n\n  /**\n   * Log error to console\n   *\n   * @param {string} text - Text to log\n   * @returns {void}\n   */\n  logError (text = '') {\n    console.error('Bartender: ' + text)\n  }\n\n  /**\n   * Log debug message to console\n   *\n   * @param {string} text - Text to log\n   * @returns {void}\n   */\n  debug (text = '') {\n    if (!this.options.debug) return\n\n    console.log('Bartender debug: ' + text)\n  }\n\n  /**\n   * Initialize Bartender\n   *\n   * @returns {object} Bartender instance\n   */\n  init () {\n    try {\n      // Find and validate required elements\n      this.mainWrap = document.querySelector(this.options.mainWrapSelector)\n      if (!this.mainWrap) throw 'Main wrap element was not found with selector: ' + this.options.mainWrapSelector\n\n      this.contentWrap = this.mainWrap.querySelector(this.options.contentWrapSelector)\n      if (!this.contentWrap) throw 'Content wrap element was not found with selector: ' + this.options.contentWrapSelector\n\n      // Find buttons\n      this.openButtons = this.mainWrap.querySelectorAll('[data-bartender-open]')\n      this.closeButtons = this.mainWrap.querySelectorAll('[data-bartender-close]')\n      this.toggleButtons = this.mainWrap.querySelectorAll('[data-bartender-toggle]')\n\n      // Add classes\n      this.mainWrap.classList.add('bartender-main')\n      this.contentWrap.classList.add('bartender-content')\n\n      // Find bars\n      this.mainWrap.querySelectorAll('[data-bartender-bar]').forEach(bar => {\n        this.addBar(bar)\n      })\n\n      // Check that there's at least one bar defined\n      if (!Object.keys(this.bars).length) throw 'Cannot find any bars.'\n\n      // Open buttons\n      this.openButtons.forEach(button => {\n        let position = button.getAttribute('data-bartender-open')\n\n        if (!this.isValidPosition(position)) {\n          this.logError('Open button has invalid bar position \\'' + position + '\\' defined. Use one of the following values: ' + this.validBarPositions.join(', '))\n          return\n        }\n\n        // Add ARIA attributes\n        button.setAttribute('aria-expanded', 'false')\n\n        // Event listeners for open buttons\n        button.addEventListener('click', () => {\n          this.open(position, button)\n        })\n      })\n\n      // Toggle buttons\n      this.toggleButtons.forEach(button => {\n        let position = button.getAttribute('data-bartender-toggle')\n\n        if (!this.isValidPosition(position)) {\n          this.logError('Toggle button has invalid bar position \\'' + position + '\\' defined. Use one of the following values: ' + this.validBarPositions.join(', '))\n          return\n        }\n\n        // Add ARIA attributes\n        button.setAttribute('aria-expanded', 'false')\n\n        // Event listeners for toggle buttons\n        button.addEventListener('click', () => {\n          this.toggle(position, button)\n        })\n      })\n\n      // Close buttons\n      this.closeButtons.forEach(button => {\n        // Event listeners for close buttons\n        button.addEventListener('click', () => {\n          this.close()\n        })\n      })\n\n      // Find pushable elements\n      this.pushElements = this.mainWrap.querySelectorAll('[data-bartender-push]')\n\n      if (this.pushElements.length) this.debug('Registered ' + this.pushElements.length + ' pushable elements.')\n\n      // Add overlay\n      if (this.options.overlay && !this.overlay) {\n        this.overlay = document.createElement('div')\n        this.overlay.classList.add('bartender-overlay')\n        this.overlay.addEventListener('click', () => this.close())\n\n        this.contentWrap.appendChild(this.overlay)\n      }\n\n      // Enable closing the bar with escape key\n      if (this.options.closeOnEsc) {\n        window.addEventListener('keydown', event => {\n          if (event.keyCode === 27) {\n            this.close()\n          }\n        })\n      }\n\n      // Adjust content wrapper transform when window is resized\n      window.addEventListener('resize', () => {\n        clearTimeout(this.resizeTimeout)\n\n        this.resizeTimeout = setTimeout(() => {\n          this.setPush()\n        }, 200)\n      })\n\n      // Add class\n      this.mainWrap.classList.add(this.options.readyClass)\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return this\n  }\n\n  /**\n   * Is defined bar position valid?\n   *\n   * @param {string} position - Position to validate\n   * @returns {boolean}\n   */\n  isValidPosition (position = null) {\n    return this.validBarPositions.indexOf(position) >= 0\n  }\n\n  /**\n   * Add a new off-canvas bar\n   *\n   * @param {object} - BartenderBar instance\n   * @returns {object} Added bar instance\n   */\n  addBar (bar) {\n    try {\n      // Get bar configuration\n      let position = bar.getAttribute('data-bartender-bar')\n\n      // Validate required elements\n      if (!this.mainWrap || !this.contentWrap) return this\n\n      // Validate position\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: ' + this.validBarPositions.join(', ')\n\n      // Check that bar is not already defined\n      if (this.bars[position]) throw 'Bar with position \\'' + position + '\\' is already defined'\n\n      // Create new bar object\n      const newBar = new BartenderBar()\n      newBar.element = bar\n      newBar.init()\n\n      // Insert new bar\n      this.bars[position] = newBar\n\n      this.debug('Added bar \\'' + position + '\\' with mode \\'' + newBar.mode + '\\'')\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return bar\n  }\n\n  /**\n   * Open off-canvas bar\n   *\n   * @param {string} position - Bar position\n   * @param {object} button - Button which was used to run this method\n   * @returns {object} Opened bar instance\n   */\n  async open (position = '', button = null) {\n    try {\n      // Validate position\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: ' + this.validBarPositions.join(', ')\n\n      // Get bar instance\n      const bar = this.bars[position]\n\n      if (!bar) throw 'Bar with position \\'' + position + '\\' is not defined. Use one of the following: ' + Object.keys(this.bars).join(', ') + '.'\n\n      // Close other bars\n      await this.close()\n\n      this.debug('Opening bar \\'' + position + '\\'')\n\n      // Wait until transition ends and dispatch event\n      bar.element.addEventListener('transitionend', () => {\n        // User might close bar before the transition ends,\n        // so make sure that this bar is still open.\n        if (this.currentOpenBar === null || this.currentOpenBar.position !== bar.position) return\n\n        this.debug('Opening bar \\'' + bar.position + '\\' was finished')\n\n        this.mainWrap.dispatchEvent(new CustomEvent('bartender-afterOpen', {\n          bubbles: true,\n          detail: {\n            bar: bar,\n            button: button,\n          },\n        }))\n      }, {\n        once: true,\n      })\n\n      // Focus on bar\n      bar.enableFocus()\n\n      // Mark this bar as open\n      this.currentOpenBar = bar\n      bar.element.classList.add('bartender-bar--open')\n\n      // Push elements\n      this.setPush()\n\n      // Add class to the main wrap\n      this.mainWrap.classList.add(this.options.openClass)\n\n      // Remember the button which was used to open off-canvas\n      this.previousOpenButton = button\n\n      // Set ARIA attributes of the button\n      if (button) button.setAttribute('aria-expanded', true)\n\n      // Show overlay\n      this.showOverlay()\n\n      // Dispatch event\n      this.mainWrap.dispatchEvent(new CustomEvent('bartender-open', {\n        bubbles: true,\n        detail: {\n          bar: bar,\n          button: button,\n        },\n      }))\n\n      return bar\n    } catch (error) {\n      this.logError(error)\n    }\n  }\n\n  /**\n   * Toggle off-canvas bar\n   *\n   * @param {string} position - Bar position\n   * @param {object} button - Button which was used to run this method\n   * @returns {object} Toggled bar instance\n   */\n  async toggle (position = null, button = null) {\n    try {\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: ' + this.validBarPositions.join(', ')\n\n      if (this.currentOpenBar && this.currentOpenBar.position == position) {\n        return this.close()\n      } else {\n        await this.close()\n        return this.open(position, button)\n      }\n    } catch (error) {\n      this.logError(error)\n    }\n  }\n\n  /**\n   * Close any open off-canvas bar\n   *\n   * @returns {Promise} Resolve with closed bar or reject with an error\n   */\n  close () {\n    return new Promise((resolve, reject) => {\n      try {\n        if (!this.currentOpenBar) return resolve()\n\n        let bar = this.bars[this.currentOpenBar.position]\n\n        this.debug('Closing bar \\'' + bar.position + '\\'')\n\n        // Dispatch event\n        this.mainWrap.dispatchEvent(new CustomEvent('bartender-close', {\n          bubbles: true,\n          detail: {\n            bar: bar,\n          },\n        }))\n\n        // Hide overlay\n        this.hideOverlay()\n\n        // Remove transform from wrapper element\n        this.contentWrap.style.removeProperty('transform')\n\n        // Remove transforms from pushable elements\n        this.pushElements.forEach(el => {\n          el.style.removeProperty('transform')\n        })\n\n        // Close bar\n        bar.disableFocus()\n        bar.element.classList.remove('bartender-bar--open')\n\n        this.currentOpenBar = null\n\n        // Wait until bar transition ends\n        bar.element.addEventListener('transitionend', () => {\n          // Dispatch event\n          this.mainWrap.dispatchEvent(new CustomEvent('bartender-afterClose', {\n            bubbles: true,\n            detail: {\n              bar: bar,\n            },\n          }))\n\n          // Restore scrolling to the main wrap\n          this.mainWrap.style.removeProperty('overflow')\n\n          // Remove class from the main wrap\n          this.mainWrap.classList.remove(this.options.openClass)\n\n          // Focus open button which was used to open the bar\n          if (this.previousOpenButton) {\n            this.previousOpenButton.focus()\n            this.previousOpenButton.setAttribute('aria-expanded', 'false')\n            this.previousOpenButton = null\n          } else {\n            // Bar was closed using keyboard or API. Focus on content element instead.\n            this.contentWrap.focus()\n          }\n\n          setTimeout(() => {\n            this.debug('Closing bar \\'' + bar.position + '\\' was finished')\n\n            return resolve(bar)\n          }, 200)\n        }, {\n          once: true,\n        })\n      } catch (error) {\n        this.logError(error)\n\n        return reject(error)\n      }\n    })\n  }\n\n  /**\n   * Set transforms for pushable elements\n   *\n   * @returns {void}\n   */\n  setPush () {\n    if (!this.currentOpenBar || !this.currentOpenBar.mode) return\n\n    let transform = null\n\n    // Hide overflow of main wrapper\n    // This has to be done first in order to get correct width/height\n    this.mainWrap.style.overflow = 'hidden'\n\n    switch (this.currentOpenBar.position) {\n      case 'left':\n        transform = 'translateX(' + this.currentOpenBar.element.offsetWidth + 'px)'\n        break\n\n      case 'right':\n        transform = 'translateX(-' + this.currentOpenBar.element.offsetWidth + 'px)'\n        break\n\n      case 'top':\n        transform = 'translateY(' + this.currentOpenBar.element.offsetHeight + 'px)'\n        break\n\n      case 'bottom':\n        transform = 'translateY(-' + this.currentOpenBar.element.offsetHeight + 'px)'\n        break\n    }\n\n    if (['push',\n      'reveal',].indexOf(this.currentOpenBar.mode) >= 0) {\n      // Transform content wrapper\n      this.contentWrap.style.transform = transform\n    }\n\n    // Transform other pushable elements\n    this.pushElements.forEach(el => {\n      el.style.transform = transform\n    })\n  }\n\n  /**\n   * Show shading overlay\n   *\n   * @returns {void}\n   */\n  showOverlay () {\n    if (!this.overlay) return\n    if (this.overlay.classList.contains('bartender-overlay--visible')) return\n\n    this.overlay.classList.add('bartender-overlay--visible')\n  }\n\n  /**\n   * Hide shading overlay\n   *\n   * @returns {void}\n   */\n  hideOverlay () {\n    if (!this.overlay) return\n    if (!this.overlay.classList.contains('bartender-overlay--visible')) return\n\n    this.overlay.classList.remove('bartender-overlay--visible')\n  }\n}\n\n/**\n * Class representing a single Bartender bar\n */\nclass BartenderBar {\n\n  constructor () {\n    this.element = null\n    this.position = null\n    this.mode = 'float'\n    this.focusableElementSelector = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    this.validModes = [\n      'float',\n      'push',\n      'reveal',\n    ]\n  }\n\n  /**\n   * Initialize bar\n   *\n   * @returns {object} Bar instance\n   */\n  init () {\n    // Check that defined bar element exists\n    if (!this.element) throw 'Bar element for \\'' + this.position + '\\' was not found!'\n\n    // Set position\n    this.position = this.element.getAttribute('data-bartender-bar')\n    if (!this.position) throw 'Missing position for bar'\n\n    // Set mode\n    if (this.element.getAttribute('data-bartender-bar-mode')) {\n      this.mode = this.element.getAttribute('data-bartender-bar-mode')\n    }\n\n    // Validate mode\n    if (this.validModes.indexOf(this.mode) < 0) throw 'Invalid mode \\'' + this.mode + '\\' for bar \\'' + this.position + '\\'. Use one of the following values: ' + this.validModes.join(', ')\n\n    // Disable focus\n    this.disableFocus()\n\n    return this\n  }\n\n  /**\n   * Disable focus on bar child elements\n   *\n   * @returns {object} Bar instance\n   */\n  disableFocus () {\n    // Disable focus on bar child elements\n    this.element.querySelectorAll(this.focusableElementSelector).forEach(item => {\n      item.setAttribute('tabindex', '-1')\n    })\n\n    // Disable focus on bar\n    this.element.setAttribute('tabindex', '-1')\n    this.element.setAttribute('aria-hidden', 'true')\n\n    return this\n  }\n\n  /**\n   * Enable focus on bar child elements\n   *\n   * @returns {object} Bar instance\n   */\n  enableFocus () {\n    // Enable focus on bar child elements\n    this.element.querySelectorAll(this.focusableElementSelector).forEach(item => {\n      item.removeAttribute('tabindex')\n    })\n\n    // Enable focus on bar\n    this.element.removeAttribute('aria-hidden')\n    this.element.setAttribute('tabindex', '0')\n\n    // Focus on bar\n    this.element.focus()\n\n    return this\n  }\n\n}"],"file":"bartender.module.js"}