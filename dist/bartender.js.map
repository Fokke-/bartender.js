{"version":3,"sources":["bartender.js"],"names":["Bartender","[object Object]","options","this","Object","assign","debug","overlay","closeOnEsc","mainWrapSelector","contentWrapSelector","readyClass","openClass","currentOpenBar","previousOpenButton","resizeTimeout","bars","openButtons","closeButtons","toggleButtons","pushElements","validBarPositions","init","text","console","log","error","mainWrap","document","querySelector","contentWrap","querySelectorAll","classList","add","forEach","bar","addBar","keys","length","button","position","getAttribute","isValidPosition","setAttribute","addEventListener","open","logError","join","toggle","close","createElement","appendChild","window","event","keyCode","clearTimeout","setTimeout","setPush","indexOf","newBar","BartenderBar","element","mode","dispatchEvent","CustomEvent","bubbles","detail","once","enableFocus","showOverlay","Promise","resolve","reject","hideOverlay","style","removeProperty","el","disableFocus","remove","focus","transform","overflow","offsetWidth","offsetHeight","contains","focusableElementSelector","validModes","item","removeAttribute"],"mappings":"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","file":"bartender.js","sourcesContent":["'use strict';\n\n/**\n * Class for creating accessible off-canvas bars.\n */\nclass Bartender {\n\n  /**\n   * @param {object} options - User defined options\n   */\n  constructor (options) {\n    // Apply user configuration\n    this.options = Object.assign({\n      // Debug mode\n      debug: false,\n\n      // Show shading overlay over content wrapper when bar is open?\n      overlay: true,\n\n      // Close open bar with escape key?\n      closeOnEsc: true,\n\n      // Selector to find main wrapper\n      mainWrapSelector: '.bartender-main',\n\n      // Selector to find content wrapper\n      contentWrapSelector: '.bartender-content',\n\n      // Classes\n      readyClass: 'bartender-ready',\n      openClass: 'bartender-open',\n    }, options)\n\n    // Overlay element\n    this.overlay = null\n\n    // Currently open bar\n    this.currentOpenBar = null\n\n    // Button which was previously used to open the bar\n    this.previousOpenButton = null\n\n    // Window resize timeout\n    this.resizeTimeout = null\n\n    // Object for storing the bars\n    this.bars = {}\n\n    // Arrays for storing buttons\n    this.openButtons = []\n    this.closeButtons = []\n    this.toggleButtons = []\n\n    // Array for storing pushable elements\n    // These elements will be moved when bar with \"push\" or \"reveal\" mode is being opened.\n    this.pushElements = []\n\n    // Valid bar positions\n    this.validBarPositions = ['left', 'right', 'top', 'bottom']\n\n    // Run initializer\n    this.init()\n  }\n\n  /**\n   * Log to console\n   *\n   * @param {string} text - Text to log\n   * @returns {void}\n   */\n  log (text = '') {\n    console.log('Bartender: ' + text)\n  }\n\n  /**\n   * Log error to console\n   *\n   * @param {string} text - Text to log\n   * @returns {void}\n   */\n  logError (text = '') {\n    console.error('Bartender: ' + text)\n  }\n\n  /**\n   * Log debug message to console\n   *\n   * @param {string} text - Text to log\n   * @returns {void}\n   */\n  debug (text = '') {\n    if (!this.options.debug) return\n\n    console.log('Bartender debug: ' + text)\n  }\n\n  /**\n   * Initialize Bartender\n   *\n   * @returns {object} Bartender instance\n   */\n  init () {\n    try {\n      // Find and validate required elements\n      this.mainWrap = document.querySelector(this.options.mainWrapSelector)\n      if (!this.mainWrap) throw 'Main wrap element was not found with selector: ' + this.options.mainWrapSelector\n\n      this.contentWrap = this.mainWrap.querySelector(this.options.contentWrapSelector)\n      if (!this.contentWrap) throw 'Content wrap element was not found with selector: ' + this.options.contentWrapSelector\n\n      // Find buttons\n      this.openButtons = this.mainWrap.querySelectorAll('[data-bartender-open]')\n      this.closeButtons = this.mainWrap.querySelectorAll('[data-bartender-close]')\n      this.toggleButtons = this.mainWrap.querySelectorAll('[data-bartender-toggle]')\n\n      // Add classes\n      this.mainWrap.classList.add('bartender-main')\n      this.contentWrap.classList.add('bartender-content')\n\n      // Find bars\n      this.mainWrap.querySelectorAll('[data-bartender-bar]').forEach(bar => {\n        this.addBar(bar)\n      })\n\n      // Check that there's at least one bar defined\n      if (!Object.keys(this.bars).length) throw 'Cannot find any bars.'\n\n      // Open buttons\n      this.openButtons.forEach(button => {\n        let position = button.getAttribute('data-bartender-open')\n\n        if (!this.isValidPosition(position)) {\n          this.logError('Open button has invalid bar position \\'' + position + '\\' defined. Use one of the following values: ' + this.validBarPositions.join(', '))\n          return\n        }\n\n        // Add ARIA attributes\n        button.setAttribute('aria-expanded', 'false')\n\n        // Event listeners for open buttons\n        button.addEventListener('click', () => {\n          this.open(position, button)\n        })\n      })\n\n      // Toggle buttons\n      this.toggleButtons.forEach(button => {\n        let position = button.getAttribute('data-bartender-toggle')\n\n        if (!this.isValidPosition(position)) {\n          this.logError('Toggle button has invalid bar position \\'' + position + '\\' defined. Use one of the following values: ' + this.validBarPositions.join(', '))\n          return\n        }\n\n        // Add ARIA attributes\n        button.setAttribute('aria-expanded', 'false')\n\n        // Event listeners for toggle buttons\n        button.addEventListener('click', () => {\n          this.toggle(position, button)\n        })\n      })\n\n      // Close buttons\n      this.closeButtons.forEach(button => {\n        // Event listeners for close buttons\n        button.addEventListener('click', () => {\n          this.close()\n        })\n      })\n\n      // Find pushable elements\n      this.pushElements = this.mainWrap.querySelectorAll('[data-bartender-push]')\n\n      if (this.pushElements.length) this.debug('Registered ' + this.pushElements.length + ' pushable elements.')\n\n      // Add overlay\n      if (this.options.overlay && !this.overlay) {\n        this.overlay = document.createElement('div')\n        this.overlay.classList.add('bartender-overlay')\n        this.overlay.addEventListener('click', () => this.close())\n\n        this.contentWrap.appendChild(this.overlay)\n      }\n\n      // Enable closing the bar with escape key\n      if (this.options.closeOnEsc) {\n        window.addEventListener('keydown', event => {\n          if (event.keyCode === 27) {\n            this.close()\n          }\n        })\n      }\n\n      // Adjust content wrapper transform when window is resized\n      window.addEventListener('resize', () => {\n        clearTimeout(this.resizeTimeout)\n\n        this.resizeTimeout = setTimeout(() => {\n          this.setPush()\n        }, 200)\n      })\n\n      // Add class\n      this.mainWrap.classList.add(this.options.readyClass)\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return this\n  }\n\n  /**\n   * Is defined bar position valid?\n   *\n   * @param {string} position - Position to validate\n   * @returns {boolean}\n   */\n  isValidPosition (position = null) {\n    return this.validBarPositions.indexOf(position) >= 0\n  }\n\n  /**\n   * Add a new off-canvas bar\n   *\n   * @param {object} - BartenderBar instance\n   * @returns {object} Added bar instance\n   */\n  addBar (bar) {\n    try {\n      // Get bar configuration\n      let position = bar.getAttribute('data-bartender-bar')\n\n      // Validate required elements\n      if (!this.mainWrap || !this.contentWrap) return this\n\n      // Validate position\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: ' + this.validBarPositions.join(', ')\n\n      // Check that bar is not already defined\n      if (this.bars[position]) throw 'Bar with position \\'' + position + '\\' is already defined'\n\n      // Create new bar object\n      const newBar = new BartenderBar()\n      newBar.element = bar\n      newBar.init()\n\n      // Insert new bar\n      this.bars[position] = newBar\n\n      this.debug('Added bar \\'' + position + '\\' with mode \\'' + newBar.mode + '\\'')\n    } catch (error) {\n      this.logError(error)\n    }\n\n    return bar\n  }\n\n  /**\n   * Open off-canvas bar\n   *\n   * @param {string} position - Bar position\n   * @param {object} button - Button which was used to run this method\n   * @returns {object} Opened bar instance\n   */\n  async open (position = '', button = null) {\n    try {\n      // Validate position\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: ' + this.validBarPositions.join(', ')\n\n      // Get bar instance\n      const bar = this.bars[position]\n\n      if (!bar) throw 'Bar with position \\'' + position + '\\' is not defined. Use one of the following: ' + Object.keys(this.bars).join(', ') + '.'\n\n      // Close other bars\n      await this.close()\n\n      this.debug('Opening bar \\'' + position + '\\'')\n\n      // Wait until transition ends and dispatch event\n      bar.element.addEventListener('transitionend', () => {\n        // User might close bar before the transition ends,\n        // so make sure that this bar is still open.\n        if (this.currentOpenBar === null || this.currentOpenBar.position !== bar.position) return\n\n        this.debug('Opening bar \\'' + bar.position + '\\' was finished')\n\n        this.mainWrap.dispatchEvent(new CustomEvent('bartender-afterOpen', {\n          bubbles: true,\n          detail: {\n            bar: bar,\n            button: button,\n          }\n        }))\n      }, {\n        once: true,\n      })\n\n      // Focus on bar\n      bar.enableFocus()\n\n      // Mark this bar as open\n      this.currentOpenBar = bar\n      bar.element.classList.add('bartender-bar--open')\n\n      // Push elements\n      this.setPush()\n\n      // Add class to the main wrap\n      this.mainWrap.classList.add(this.options.openClass)\n\n      // Remember the button which was used to open off-canvas\n      this.previousOpenButton = button\n\n      // Set ARIA attributes of the button\n      if (button) button.setAttribute('aria-expanded', true)\n\n      // Show overlay\n      this.showOverlay()\n\n      // Dispatch event\n      this.mainWrap.dispatchEvent(new CustomEvent('bartender-open', {\n        bubbles: true,\n        detail: {\n          bar: bar,\n          button: button,\n        }\n      }))\n\n      return bar\n    } catch (error) {\n      this.logError(error)\n    }\n  }\n\n  /**\n   * Toggle off-canvas bar\n   *\n   * @param {string} position - Bar position\n   * @param {object} button - Button which was used to run this method\n   * @returns {object} Toggled bar instance\n   */\n  async toggle (position = null, button = null) {\n    try {\n      if (!this.isValidPosition(position)) throw 'Invalid bar position \\'' + position + '\\'. Use one of the following values: ' + this.validBarPositions.join(', ')\n\n      if (this.currentOpenBar && this.currentOpenBar.position == position) {\n        return this.close()\n      } else {\n        await this.close()\n        return this.open(position, button)\n      }\n    } catch (error) {\n      this.logError(error)\n    }\n  }\n\n  /**\n   * Close any open off-canvas bar\n   *\n   * @returns {Promise} Resolve with closed bar or reject with an error\n   */\n  close () {\n    return new Promise((resolve, reject) => {\n      try {\n        if (!this.currentOpenBar) return resolve()\n\n        let bar = this.bars[this.currentOpenBar.position]\n\n        this.debug('Closing bar \\'' + bar.position + '\\'')\n\n        // Dispatch event\n        this.mainWrap.dispatchEvent(new CustomEvent('bartender-close', {\n          bubbles: true,\n          detail: {\n            bar: bar,\n          }\n        }))\n\n        // Hide overlay\n        this.hideOverlay()\n\n        // Remove transform from wrapper element\n        this.contentWrap.style.removeProperty('transform')\n\n        // Remove transforms from pushable elements\n        this.pushElements.forEach(el => {\n          el.style.removeProperty('transform')\n        })\n\n        // Close bar\n        bar.disableFocus()\n        bar.element.classList.remove('bartender-bar--open')\n\n        this.currentOpenBar = null\n\n        // Wait until bar transition ends\n        bar.element.addEventListener('transitionend', () => {\n          // Dispatch event\n          this.mainWrap.dispatchEvent(new CustomEvent('bartender-afterClose', {\n            bubbles: true,\n            detail: {\n              bar: bar,\n            }\n          }))\n\n          // Restore scrolling to the main wrap\n          this.mainWrap.style.removeProperty('overflow')\n\n          // Remove class from the main wrap\n          this.mainWrap.classList.remove(this.options.openClass)\n\n          // Focus open button which was used to open the bar\n          if (this.previousOpenButton) {\n            this.previousOpenButton.focus()\n            this.previousOpenButton.setAttribute('aria-expanded', 'false')\n            this.previousOpenButton = null\n          } else {\n            // Bar was closed using keyboard or API. Focus on content element instead.\n            this.contentWrap.focus()\n          }\n\n          setTimeout(() => {\n            this.debug('Closing bar \\'' + bar.position + '\\' was finished')\n\n            return resolve(bar)\n          }, 200)\n        }, {\n          once: true,\n        })\n      } catch (error) {\n        this.logError(error)\n\n        return reject(error)\n      }\n    })\n  }\n\n  /**\n   * Set transforms for pushable elements\n   *\n   * @returns {void}\n   */\n  setPush () {\n    if (!this.currentOpenBar || !this.currentOpenBar.mode) return\n\n    let transform = null\n\n    // Hide overflow of main wrapper\n    // This has to be done first in order to get correct width/height\n    this.mainWrap.style.overflow = 'hidden'\n\n    switch (this.currentOpenBar.position) {\n      case 'left':\n        transform = 'translateX(' + this.currentOpenBar.element.offsetWidth + 'px)'\n        break\n\n      case 'right':\n        transform = 'translateX(-' + this.currentOpenBar.element.offsetWidth + 'px)'\n        break\n\n      case 'top':\n        transform = 'translateY(' + this.currentOpenBar.element.offsetHeight + 'px)'\n        break\n\n      case 'bottom':\n        transform = 'translateY(-' + this.currentOpenBar.element.offsetHeight + 'px)'\n        break\n    }\n\n    if (['push', 'reveal'].indexOf(this.currentOpenBar.mode) >= 0) {\n      // Transform content wrapper\n      this.contentWrap.style.transform = transform\n    }\n\n    // Transform other pushable elements\n    this.pushElements.forEach(el => {\n      el.style.transform = transform\n    })\n  }\n\n  /**\n   * Show shading overlay\n   *\n   * @returns {void}\n   */\n  showOverlay () {\n    if (!this.overlay) return\n    if (this.overlay.classList.contains('bartender-overlay--visible')) return\n\n    this.overlay.classList.add('bartender-overlay--visible')\n  }\n\n  /**\n   * Hide shading overlay\n   *\n   * @returns {void}\n   */\n  hideOverlay () {\n    if (!this.overlay) return\n    if (!this.overlay.classList.contains('bartender-overlay--visible')) return\n\n    this.overlay.classList.remove('bartender-overlay--visible')\n  }\n}\n\n/**\n * Class representing a single Bartender bar\n */\nclass BartenderBar {\n\n  constructor() {\n    this.element = null\n    this.position = null\n    this.mode = 'float'\n    this.focusableElementSelector = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    this.validModes = ['float', 'push', 'reveal']\n  }\n\n  /**\n   * Initialize bar\n   *\n   * @returns {object} Bar instance\n   */\n  init () {\n    // Check that defined bar element exists\n    if (!this.element) throw 'Bar element for \\'' + this.position + '\\' was not found!'\n\n    // Set position\n    this.position = this.element.getAttribute('data-bartender-bar')\n    if (!this.position) throw 'Missing position for bar'\n\n    // Set mode\n    if (this.element.getAttribute('data-bartender-bar-mode')) {\n      this.mode = this.element.getAttribute('data-bartender-bar-mode')\n    }\n\n    // Validate mode\n    if (this.validModes.indexOf(this.mode) < 0) throw 'Invalid mode \\'' + this.mode + '\\' for bar \\'' + this.position + '\\'. Use one of the following values: ' + this.validModes.join(', ')\n\n    // Disable focus\n    this.disableFocus()\n\n    return this\n  }\n\n  /**\n   * Disable focus on bar child elements\n   *\n   * @returns {object} Bar instance\n   */\n  disableFocus () {\n    // Disable focus on bar child elements\n    this.element.querySelectorAll(this.focusableElementSelector).forEach(item => {\n      item.setAttribute('tabindex', '-1')\n    })\n\n    // Disable focus on bar\n    this.element.setAttribute('tabindex', '-1')\n    this.element.setAttribute('aria-hidden', 'true')\n\n    return this\n  }\n\n  /**\n   * Enable focus on bar child elements\n   *\n   * @returns {object} Bar instance\n   */\n  enableFocus () {\n    // Enable focus on bar child elements\n    this.element.querySelectorAll(this.focusableElementSelector).forEach(item => {\n      item.removeAttribute('tabindex')\n    })\n\n    // Enable focus on bar\n    this.element.removeAttribute('aria-hidden')\n    this.element.setAttribute('tabindex', '0')\n\n    // Focus on bar\n    this.element.focus()\n\n    return this\n  }\n\n}"]}