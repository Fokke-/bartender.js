{"version":3,"file":"bartender.umd.cjs","sources":["../src/lib/BartenderError.ts","../src/lib/utils.ts","../src/lib/BartenderBar.ts","../src/lib/Bartender.ts"],"sourcesContent":["/**\n * Bartender error\n */\nexport class BartenderError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'Bartender error'\n  }\n}\n","import type { BartenderElementQuery } from './types'\n\nexport const parseOptions = (obj: Record<string, any>): Record<string, any> => {\n  return Object.entries(obj).reduce(\n    (acc, [key, value]) => {\n      if (typeof value === 'undefined') {\n        return acc\n      }\n\n      acc[key] = value\n      return acc\n    },\n    {} as Record<string, any>,\n  )\n}\n/**\n * Resolve HTML element\n */\nexport const resolveElement = (\n  query: BartenderElementQuery,\n  parent: Document | HTMLElement = document,\n): HTMLElement | HTMLDialogElement | null => {\n  if (query instanceof Element) {\n    return query as HTMLElement\n  }\n\n  if (typeof query === 'string') {\n    return parent.querySelector(query) as HTMLElement\n  }\n\n  return null\n}\n\n/**\n * Sleep for given number of milliseconds\n */\nexport const sleep = (duration = 100): Promise<void> => {\n  return new Promise((resolve) => {\n    if (!duration) return resolve()\n\n    return setTimeout(resolve, duration)\n  })\n}\n","import type { BartenderBarOptions, BartenderBarPosition } from './types'\nimport { BartenderError } from './BartenderError'\nimport { resolveElement, sleep } from './utils'\n\n/**\n * Bartender bar\n */\nexport class BartenderBar {\n  /** Enable debug mode? */\n  public debug = false\n\n  /** Is bar initialized? */\n  private initialized = false\n\n  /** Bar name */\n  private _name = ''\n\n  /** Bar element */\n  public readonly el: HTMLDialogElement\n\n  /** Bar position */\n  private _position: BartenderBarPosition = 'left'\n\n  /** Is the bar a modal? */\n  private _modal = true\n\n  /** Enable overlay? */\n  private _overlay = true\n\n  /** Enable permanent mode? */\n  private _permanent = false\n\n  /** Scroll to the top when bar is opened? */\n  private _scrollTop = true\n\n  /** Is the bar currently open? */\n  private isOpened = false\n\n  /** Handler for dialog close event */\n  private onCloseHandler\n\n  /** Handler for dialog click event */\n  private onClickHandler\n\n  /**\n   * Create a new bar\n   */\n  constructor(name: string, options: BartenderBarOptions = {}) {\n    if (!name) {\n      throw new BartenderError('Bar name is required')\n    }\n    this.name = name\n\n    // Get element\n    const el = resolveElement(options.el || null) as HTMLDialogElement\n\n    if (!el) {\n      throw new BartenderError(`Element for bar '${this.name}' is required`)\n    }\n\n    if (el.tagName !== 'DIALOG') {\n      throw new BartenderError(\n        `Bar element for '${this.name}' must be a <dialog> element`,\n      )\n    }\n\n    this.el = el\n    this.el.classList.add('bartender-bar', 'bartender-bar--closed')\n\n    this.position = options.position ?? this._position\n    this.modal = options.modal ?? this._modal\n    this.overlay = options.overlay ?? this._overlay\n    this.permanent = options.permanent ?? this._permanent\n    this.scrollTop = options.scrollTop ?? this._scrollTop\n\n    // Handler for close events\n    this.onCloseHandler = async (_event: Event): Promise<void> => {\n      if (this.debug) {\n        console.debug('Closing bar', this)\n      }\n\n      this.el.dispatchEvent(\n        new CustomEvent('bartender-bar-before-close', {\n          bubbles: true,\n          detail: { bar: this },\n        }),\n      )\n\n      this.el.classList.remove('bartender-bar--open')\n      this.isOpened = false\n\n      await sleep(this.getTransitionDuration())\n      this.el.classList.add('bartender-bar--closed')\n\n      this.el.dispatchEvent(\n        new CustomEvent('bartender-bar-after-close', {\n          bubbles: true,\n          detail: { bar: this },\n        }),\n      )\n\n      if (this.debug) {\n        console.debug('Finished closing bar', this)\n      }\n    }\n\n    // Handler for click events\n    this.onClickHandler = (event: MouseEvent): void => {\n      const rect = this.el.getBoundingClientRect()\n\n      // Detect clicking on backdrop\n      if (\n        this.permanent === false &&\n        (rect.left > event.clientX ||\n          rect.right < event.clientX ||\n          rect.top > event.clientY ||\n          rect.bottom < event.clientY)\n      ) {\n        event.stopPropagation()\n\n        this.el.dispatchEvent(\n          new CustomEvent('bartender-bar-backdrop-click', {\n            bubbles: true,\n            detail: {\n              bar: this,\n            },\n          }),\n        )\n      }\n    }\n\n    // Add event listeners\n    this.el.addEventListener('close', this.onCloseHandler as EventListener)\n    this.el.addEventListener('click', this.onClickHandler as EventListener)\n\n    this.initialized = true\n  }\n\n  /**\n   * Destroy bar instance\n   */\n  public destroy(): this {\n    this.el.classList.remove(\n      'bartender-bar',\n      `bartender-bar--position-${this.position}`,\n    )\n\n    this.el.removeEventListener('close', this.onCloseHandler)\n    this.el.removeEventListener('click', this.onClickHandler)\n\n    return this\n  }\n\n  /** Bar name */\n  public get name() {\n    return this._name\n  }\n\n  public set name(val: string) {\n    this._name = val\n\n    if (this.initialized === false) {\n      return\n    }\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'name',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Updated bar name', this)\n    }\n  }\n\n  /** Bar position */\n  public get position() {\n    return this._position\n  }\n\n  public set position(val: BartenderBarPosition) {\n    // Validate position\n    if (!val) {\n      throw new BartenderError(`Position is required for bar '${this.name}'`)\n    }\n\n    const validPositions: BartenderBarPosition[] = [\n      'left',\n      'right',\n      'top',\n      'bottom',\n      'center',\n    ]\n\n    if (!validPositions.includes(val)) {\n      throw new BartenderError(\n        `Invalid position '${val}' for bar '${this.name}'. Use one of the following: ${validPositions.join(', ')}.`,\n      )\n    }\n\n    // Update element classes\n    this.el.classList.remove(`bartender-bar--position-${this._position}`)\n    this.el.classList.add(`bartender-bar--position-${val}`)\n\n    // Set new position\n    this._position = val\n\n    if (this.initialized === false) {\n      return\n    }\n\n    // If position was changed after bar was created,\n    // dispatch event to update pushable elements\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'position',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Updated bar position', this)\n    }\n  }\n\n  /** Is the bar a modal? */\n  public get modal() {\n    return this._modal\n  }\n\n  public set modal(val: boolean) {\n    const oldMode = this._modal === true ? 'modal' : 'standard'\n    const newMode = val === true ? 'modal' : 'standard'\n\n    // Update element classes\n    this.el.classList.remove(`bartender-bar--mode-${oldMode}`)\n    this.el.classList.add(`bartender-bar--mode-${newMode}`)\n\n    this._modal = val\n\n    if (this.initialized === false) {\n      return\n    }\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'modal',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Updated bar modal setting', this)\n    }\n  }\n\n  /** Enable overlay? */\n  public get overlay() {\n    return this._overlay\n  }\n\n  public set overlay(val: boolean) {\n    this._overlay = val\n\n    if (val === true) {\n      this.el.classList.add('bartender-bar--has-overlay')\n    } else {\n      this.el.classList.remove('bartender-bar--has-overlay')\n    }\n\n    if (this.initialized === false) {\n      return\n    }\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'overlay',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Updated bar overlay', this)\n    }\n  }\n\n  /** Enable permanent mode? */\n  public get permanent() {\n    return this._permanent\n  }\n\n  public set permanent(val: boolean) {\n    this._permanent = val\n\n    if (this.initialized === false) return\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'permanent',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Updated bar permanence', this)\n    }\n  }\n\n  /** Scroll to the top when bar is opened? */\n  public get scrollTop() {\n    return this._scrollTop\n  }\n\n  public set scrollTop(val: boolean) {\n    this._scrollTop = val\n\n    if (this.initialized === false) return\n\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-updated', {\n        bubbles: true,\n        detail: {\n          bar: this,\n          property: 'scrollTop',\n          value: val,\n        },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Updated bar scrollTop', this)\n    }\n  }\n\n  /**\n   * Is bar currently open?\n   */\n  public isOpen(): boolean {\n    return this.isOpened\n  }\n\n  /**\n   * Open bar\n   */\n  public async open(): Promise<this> {\n    // Dispatch 'before open' event\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-before-open', {\n        bubbles: true,\n        detail: { bar: this },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Opening bar', this)\n    }\n\n    if (this.modal === true) {\n      this.el.showModal()\n    } else {\n      this.el.show()\n    }\n\n    if (this.scrollTop === true) {\n      this.scrollToTop()\n    }\n\n    this.el.classList.remove('bartender-bar--closed')\n    this.el.classList.add('bartender-bar--open')\n    this.isOpened = true\n\n    await sleep(this.getTransitionDuration())\n\n    if (this.debug) {\n      console.debug('Finished opening bar', this)\n    }\n\n    // Dispatch 'after open' event\n    this.el.dispatchEvent(\n      new CustomEvent('bartender-bar-after-open', {\n        bubbles: true,\n        detail: { bar: this },\n      }),\n    )\n\n    return this\n  }\n\n  /**\n   * Close bar\n   */\n  public async close(): Promise<this> {\n    this.el.close()\n\n    await sleep(this.getTransitionDuration())\n\n    return this\n  }\n\n  /**\n   * Scroll bar to the top\n   */\n  public scrollToTop(): this {\n    this.el.scrollTo(0, 0)\n\n    return this\n  }\n\n  /**\n   * Get transition duration in milliseconds\n   */\n  public getTransitionDuration(): number {\n    return (\n      parseFloat(window.getComputedStyle(this.el).transitionDuration || '0') *\n      1000\n    )\n  }\n}\n","import type {\n  BartenderOptions,\n  BartenderBarDefaultOptions,\n  BartenderBarOptions,\n} from './types'\nimport { BartenderError } from './BartenderError'\nimport { BartenderBar } from './BartenderBar'\nimport { parseOptions } from './utils'\n\n/**\n * Class for creating accessible off-canvas bars.\n */\nexport class Bartender {\n  /** Enable debug mode? */\n  private _debug: boolean = false\n\n  /** Bars added to the instance */\n  public readonly bars: BartenderBar[] = []\n\n  /** Currently open bars */\n  public readonly openBars: BartenderBar[] = []\n\n  /** Default options for the bars */\n  private readonly barDefaultOptions: BartenderBarOptions = {\n    el: null,\n    position: 'left',\n    overlay: true,\n    permanent: false,\n    scrollTop: true,\n  }\n\n  /** Handler for keydown events */\n  private onKeydownHandler\n\n  /** Handler for bartender-bar-before-open events */\n  private onBarBeforeOpenHandler\n\n  /** Handler for bartender-bar-before-close events */\n  private onBarBeforeCloseHandler\n\n  /** Handler for bartender-bar-backdrop-click events */\n  private onBarBackdropClickHandler\n\n  /**\n   * Create a new Bartender instance\n   */\n  constructor(\n    options: BartenderOptions = {},\n    barDefaultOptions: BartenderBarDefaultOptions = {},\n  ) {\n    this.debug = options.debug ?? this._debug\n    this.barDefaultOptions = {\n      ...this.barDefaultOptions,\n      ...parseOptions(barDefaultOptions),\n    }\n\n    // Handler for keydown events\n    this.onKeydownHandler = ((event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        const openBar = this.getOpenBar(true)\n        if (openBar?.permanent === true) {\n          event.preventDefault()\n          return\n        }\n      }\n    }).bind(this)\n\n    // Handler for bartender-bar-before-open events\n    this.onBarBeforeOpenHandler = (event: CustomEvent): void => {\n      this.openBars.push(event.detail.bar)\n\n      if (this.openBars.some((bar) => bar.modal === true)) {\n        document.body.classList.add('bartender-disable-scroll')\n      }\n\n      document.body.classList.add('bartender-open')\n    }\n\n    // Handler for bartender-bar-before-close events\n    this.onBarBeforeCloseHandler = (event: CustomEvent): void => {\n      this.openBars.splice(this.openBars.indexOf(event.detail.bar), 1)\n\n      if (!this.openBars.length) {\n        document.body.classList.remove('bartender-open')\n      }\n\n      if (!this.openBars.some((bar) => bar.modal === true)) {\n        document.body.classList.remove('bartender-disable-scroll')\n      }\n    }\n\n    // Handler for bartender-bar-backdrop-click events\n    this.onBarBackdropClickHandler = (event: CustomEvent): void => {\n      if (this.getOpenBar(true)?.name !== event.detail.bar.name) {\n        return\n      }\n\n      this.close(event.detail.bar.name)\n    }\n\n    if (typeof document !== 'undefined' && typeof window !== 'undefined') {\n      // Add event listeners\n      document.addEventListener(\n        'keydown',\n        this.onKeydownHandler as EventListener,\n      )\n      document.addEventListener(\n        'bartender-bar-before-open',\n        this.onBarBeforeOpenHandler as EventListener,\n      )\n      document.addEventListener(\n        'bartender-bar-before-close',\n        this.onBarBeforeCloseHandler as EventListener,\n      )\n      document.addEventListener(\n        'bartender-bar-backdrop-click',\n        this.onBarBackdropClickHandler as EventListener,\n      )\n\n      document.body.classList.add('bartender-ready')\n      window.dispatchEvent(\n        new CustomEvent('bartender-init', {\n          detail: { bartender: this },\n        }),\n      )\n\n      if (this.debug) {\n        console.debug('Bartender initialized', this)\n      }\n    }\n  }\n\n  /** Enable debug mode? */\n  public get debug() {\n    return this._debug\n  }\n\n  public set debug(val: boolean) {\n    this._debug = val\n\n    for (const bar of this.bars) {\n      bar.debug = val\n    }\n  }\n\n  /**\n   * Get bar instance by name.\n   */\n  public getBar(name: string): BartenderBar | null {\n    return this.bars.find((item) => item.name === name) || null\n  }\n\n  /**\n   * Get the topmost open bar instance.\n   */\n  private getOpenBar(\n    modal: boolean | undefined = undefined,\n  ): BartenderBar | null {\n    const openBars =\n      typeof modal === 'boolean'\n        ? this.openBars.filter((bar) => bar.modal === modal)\n        : this.openBars\n    if (!openBars.length) {\n      return null\n    }\n\n    return openBars[openBars.length - 1]\n  }\n\n  /**\n   * Add a new bar\n   */\n  public addBar(name: string, options: BartenderBarOptions = {}): BartenderBar {\n    if (!name) {\n      throw new BartenderError('Bar name is required')\n    }\n\n    if (this.getBar(name)) {\n      throw new BartenderError(`Bar with name '${name}' is already defined`)\n    }\n\n    // Create a new bar\n    const bar = new BartenderBar(name, {\n      ...this.barDefaultOptions,\n      ...parseOptions(options),\n    })\n\n    // Set debug mode\n    bar.debug = this.debug\n\n    // Check that element is not assigned to another bar\n    if (this.bars.some((item) => item.el === bar.el)) {\n      throw new BartenderError(\n        `Element of bar '${bar.name}' is already being used for another bar`,\n      )\n    }\n\n    // Add the bar\n    this.bars.push(bar)\n    window.dispatchEvent(\n      new CustomEvent('bartender-bar-added', {\n        detail: { bar },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Added a new bar', bar)\n    }\n\n    return bar\n  }\n\n  /**\n   * Remove bar instance by name\n   */\n  public removeBar(name: string): this {\n    if (!name) {\n      throw new BartenderError('Bar name is required')\n    }\n\n    const bar = this.getBar(name)\n    if (!bar) {\n      throw new BartenderError(`Bar with name '${name}' was not found`)\n    }\n\n    if (bar.isOpen() === true) {\n      this.close(name)\n    }\n\n    bar.destroy()\n    this.bars.splice(\n      this.bars.findIndex((item) => item.name === name),\n      1,\n    )\n\n    window.dispatchEvent(\n      new CustomEvent('bartender-bar-removed', {\n        detail: { name },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug(`Removed bar '${name}'`)\n    }\n\n    return this\n  }\n\n  /**\n   * Open bar\n   *\n   * Resolves after the bar has opened.\n   */\n  public async open(\n    bar: BartenderBar | string,\n    keepOtherBarsOpen: boolean = false,\n  ): Promise<BartenderBar> {\n    const targetBar = (() => {\n      if (bar instanceof BartenderBar) {\n        return bar\n      }\n\n      if (typeof bar === 'string') {\n        return this.getBar(bar)\n      }\n\n      return null\n    })()\n\n    if (!targetBar) {\n      throw new BartenderError(`Unknown bar '${bar}'`)\n    }\n\n    if (targetBar.isOpen() === true) {\n      return targetBar\n    }\n\n    if (keepOtherBarsOpen === false) {\n      this.closeAll()\n    }\n\n    await targetBar.open()\n    return targetBar\n  }\n\n  /**\n   * Close bar\n   *\n   * If bar is undefined, the topmost bar will be closed. Resolves after the bar has closed.\n   */\n  public async close(\n    bar?: BartenderBar | string,\n  ): Promise<BartenderBar | null> {\n    const targetBar = (() => {\n      if (!bar) {\n        return this.getOpenBar()\n      }\n\n      if (bar instanceof BartenderBar) {\n        return bar\n      }\n\n      if (typeof bar === 'string') {\n        return this.getBar(bar)\n      }\n\n      return null\n    })()\n\n    if (!targetBar || !targetBar.isOpen()) {\n      return null\n    }\n\n    await targetBar.close()\n    return targetBar\n  }\n\n  /**\n   * Close all bars\n   *\n   * Resolves after all the bars have been closed.\n   */\n  public async closeAll(closeNonModalBars: boolean = false): Promise<this> {\n    const barNames = this.openBars.reduce((acc, item) => {\n      if (closeNonModalBars === false && item.modal === false) {\n        return acc\n      }\n\n      acc.push(item.name)\n      return acc\n    }, [] as string[])\n\n    await Promise.all(\n      barNames.map((name) => {\n        return this.close(name)\n      }),\n    )\n\n    return this\n  }\n\n  /**\n   * Toggle bar open/closed state.\n   *\n   * Resolves after the bar has opened or closed.\n   */\n  public async toggle(\n    bar?: BartenderBar | string,\n    keepOtherBarsOpen: boolean = false,\n  ): Promise<BartenderBar | null> {\n    const targetBar = (() => {\n      if (bar instanceof BartenderBar) {\n        return bar\n      }\n\n      if (typeof bar === 'string') {\n        return this.getBar(bar)\n      }\n\n      return null\n    })()\n\n    if (!targetBar) {\n      throw new BartenderError(`Unknown bar '${bar}'`)\n    }\n\n    return targetBar.isOpen() === true\n      ? await this.close(targetBar)\n      : await this.open(targetBar, keepOtherBarsOpen)\n  }\n\n  /**\n   * Destroy Bartender instance\n   */\n  public destroy(): this {\n    this.closeAll()\n\n    // Get all bar names\n    const barNames = this.bars.flatMap((item) => item.name)\n    for (const name of barNames) {\n      if (!this.getBar(name)) {\n        continue\n      }\n\n      this.removeBar(name)\n    }\n\n    // Remove classes\n    document.body.classList.remove('bartender', 'bartender-ready')\n\n    // Remove event listeners\n    document.removeEventListener(\n      'keydown',\n      this.onKeydownHandler as EventListener,\n    )\n    document.removeEventListener(\n      'bartender-bar-before-open',\n      this.onBarBeforeOpenHandler as EventListener,\n    )\n    document.removeEventListener(\n      'bartender-bar-before-close',\n      this.onBarBeforeCloseHandler as EventListener,\n    )\n    document.removeEventListener(\n      'bartender-bar-backdrop-click',\n      this.onBarBackdropClickHandler as EventListener,\n    )\n\n    window.dispatchEvent(\n      new CustomEvent('bartender-destroyed', {\n        detail: { bartender: this },\n      }),\n    )\n\n    if (this.debug) {\n      console.debug('Bartender destroyed', this)\n    }\n\n    return this\n  }\n}\n"],"names":["BartenderError","message","parseOptions","obj","acc","key","value","resolveElement","query","parent","sleep","duration","resolve","BartenderBar","name","options","el","_event","event","rect","val","validPositions","oldMode","newMode","Bartender","barDefaultOptions","bar","item","modal","openBars","keepOtherBarsOpen","targetBar","closeNonModalBars","barNames"],"mappings":"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"}